
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime';
declare const prisma: unique symbol
export type PrismaPromise<A> = Promise<A> & {[prisma]: true}
type UnwrapPromise<P extends any> = P extends Promise<infer R> ? R : P
type UnwrapTuple<Tuple extends readonly unknown[]> = {
  [K in keyof Tuple]: K extends `${number}` ? Tuple[K] extends PrismaPromise<infer X> ? X : UnwrapPromise<Tuple[K]> : UnwrapPromise<Tuple[K]>
};


/**
 * Model User
 */

export type User = {
  user_id: number
  user_email: string
  user_password: string
  user_first_name: string
  user_last_name: string
}

/**
 * Model Evaluation
 */

export type Evaluation = {
  eval_id: number
  eval_date: Date
  eval_user_id: number
}

/**
 * Model Noter
 */

export type Noter = {
  noter_eval_id: number
  noter_item_id: number
  noter_value: number
}

/**
 * Model Item
 */

export type Item = {
  item_id: number
  item_title: string
  item_skill_id: number
}

/**
 * Model Skill
 */

export type Skill = {
  skill_id: number
  skill_title: string
}


/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js (ORM replacement)
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  GlobalReject = 'rejectOnNotFound' extends keyof T
    ? T['rejectOnNotFound']
    : false
      > {
      /**
       * @private
       */
      private fetcher;
      /**
       * @private
       */
      private readonly dmmf;
      /**
       * @private
       */
      private connectionPromise?;
      /**
       * @private
       */
      private disconnectionPromise?;
      /**
       * @private
       */
      private readonly engineConfig;
      /**
       * @private
       */
      private readonly measurePerformance;

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js (ORM replacement)
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends (U | 'beforeExit')>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : V extends 'beforeExit' ? () => Promise<void> : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<any>;

  /**
   * Add a middleware
   */
  $use(cb: Prisma.Middleware): void

  /**
   * Executes a raw query and returns the number of affected rows
   * @example
   * ```
   * // With parameters use prisma.$executeRaw``, values will be escaped automatically
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE id = ${1};`
   * // Or
   * const result = await prisma.$executeRaw('UPDATE User SET cool = $1 WHERE id = $2 ;', true, 1)
  * ```
  * 
  * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
  */
  $executeRaw < T = any > (query: string | TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<number>;

  /**
   * Performs a raw query and returns the SELECT data
   * @example
   * ```
   * // With parameters use prisma.$queryRaw``, values will be escaped automatically
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'ema.il'};`
   * // Or
   * const result = await prisma.$queryRaw('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'ema.il')
  * ```
  * 
  * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
  */
  $queryRaw < T = any > (query: string | TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends PrismaPromise<any>[]>(arg: [...P]): Promise<UnwrapTuple<P>>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<GlobalReject>;

  /**
   * `prisma.evaluation`: Exposes CRUD operations for the **Evaluation** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Evaluations
    * const evaluations = await prisma.evaluation.findMany()
    * ```
    */
  get evaluation(): Prisma.EvaluationDelegate<GlobalReject>;

  /**
   * `prisma.noter`: Exposes CRUD operations for the **Noter** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Noters
    * const noters = await prisma.noter.findMany()
    * ```
    */
  get noter(): Prisma.NoterDelegate<GlobalReject>;

  /**
   * `prisma.item`: Exposes CRUD operations for the **Item** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Items
    * const items = await prisma.item.findMany()
    * ```
    */
  get item(): Prisma.ItemDelegate<GlobalReject>;

  /**
   * `prisma.skill`: Exposes CRUD operations for the **Skill** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Skills
    * const skills = await prisma.skill.findMany()
    * ```
    */
  get skill(): Prisma.SkillDelegate<GlobalReject>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  /**
   * Prisma Client JS version: 2.28.0
   * Query Engine version: 89facabd0366f63911d089156a7a70125bfbcd27
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}
 
  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}
 
  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | null | JsonObject | JsonArray

  /**
   * Same as JsonObject, but allows undefined
   */
  export type InputJsonObject = {[Key in string]?: JsonValue}
 
  export interface InputJsonArray extends Array<JsonValue> {}
 
  export type InputJsonValue = undefined |  string | number | boolean | null | InputJsonObject | InputJsonArray
   type SelectAndInclude = {
    select: any
    include: any
  }
  type HasSelect = {
    select: any
  }
  type HasInclude = {
    include: any
  }
  type CheckSelect<T, S, U> = T extends SelectAndInclude
    ? 'Please either choose `select` or `include`'
    : T extends HasSelect
    ? U
    : T extends HasInclude
    ? U
    : S

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = {
    [key in keyof T]: T[key] extends false | undefined | null ? never : key
  }[keyof T]

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> = (T | U) extends object ? (Without<T, U> & U) | (Without<U, T> & T) : T | U;


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Buffer
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Exact<A, W = unknown> = 
  W extends unknown ? A extends Narrowable ? Cast<A, W> : Cast<
  {[K in keyof A]: K extends keyof W ? Exact<A[K], W[K]> : never},
  {[K in keyof W]: K extends keyof A ? Exact<A[K], W[K]> : W[K]}>
  : never;

  type Narrowable = string | number | boolean | bigint;

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;

  export function validator<V>(): <S>(select: Exact<S, V>) => S;

  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but with an array
   */
  type PickArray<T, K extends Array<keyof T>> = Prisma__Pick<T, TupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T

  class PrismaClientFetcher {
    private readonly prisma;
    private readonly debug;
    private readonly hooks?;
    constructor(prisma: PrismaClient<any, any>, debug?: boolean, hooks?: Hooks | undefined);
    request<T>(document: any, dataPath?: string[], rootField?: string, typeName?: string, isList?: boolean, callsite?: string): Promise<T>;
    sanitizeMessage(message: string): string;
    protected unpack(document: any, data: any, path: string[], rootField?: string, isList?: boolean): any;
  }

  export const ModelName: {
    User: 'User',
    Evaluation: 'Evaluation',
    Noter: 'Noter',
    Item: 'Item',
    Skill: 'Skill'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  export type RejectOnNotFound = boolean | ((error: Error) => Error)
  export type RejectPerModel = { [P in ModelName]?: RejectOnNotFound }
  export type RejectPerOperation =  { [P in "findUnique" | "findFirst"]?: RejectPerModel | RejectOnNotFound } 
  type IsReject<T> = T extends true ? True : T extends (err: Error) => Error ? True : False
  export type HasReject<
    GlobalRejectSettings extends Prisma.PrismaClientOptions['rejectOnNotFound'],
    LocalRejectSettings,
    Action extends PrismaAction,
    Model extends ModelName
  > = LocalRejectSettings extends RejectOnNotFound
    ? IsReject<LocalRejectSettings>
    : GlobalRejectSettings extends RejectPerOperation
    ? Action extends keyof GlobalRejectSettings
      ? GlobalRejectSettings[Action] extends boolean
        ? IsReject<GlobalRejectSettings[Action]>
        : GlobalRejectSettings[Action] extends RejectPerModel
        ? Model extends keyof GlobalRejectSettings[Action]
          ? IsReject<GlobalRejectSettings[Action][Model]>
          : False
        : False
      : False
    : IsReject<GlobalRejectSettings>
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Configure findUnique/findFirst to throw an error if the query returns null. 
     *  * @example
     * ```
     * // Reject on both findUnique/findFirst
     * rejectOnNotFound: true
     * // Reject only on findFirst with a custom error
     * rejectOnNotFound: { findFirst: (err) => new Error("Custom Error")}
     * // Reject on user.findUnique with a custom error
     * rejectOnNotFound: { findUnique: {User: (err) => new Error("User not found")}}
     * ```
     */
    rejectOnNotFound?: RejectOnNotFound | RejectPerOperation
    /**
     * Overwrites the datasource url from your prisma.schema file
     */
    datasources?: Datasources

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  export type Hooks = {
    beforeRequest?: (options: { query: string, path: string[], rootField?: string, typeName?: string, document: any }) => any
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findMany'
    | 'findFirst'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'

  /**
   * These options are being passed in to the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => Promise<T>,
  ) => Promise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined; 
  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */



  /**
   * Models
   */

  /**
   * Model User
   */


  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
    max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    user_id: number | null
  }

  export type UserSumAggregateOutputType = {
    user_id: number | null
  }

  export type UserMinAggregateOutputType = {
    user_id: number | null
    user_email: string | null
    user_password: string | null
    user_first_name: string | null
    user_last_name: string | null
  }

  export type UserMaxAggregateOutputType = {
    user_id: number | null
    user_email: string | null
    user_password: string | null
    user_first_name: string | null
    user_last_name: string | null
  }

  export type UserCountAggregateOutputType = {
    user_id: number
    user_email: number
    user_password: number
    user_first_name: number
    user_last_name: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    user_id?: true
  }

  export type UserSumAggregateInputType = {
    user_id?: true
  }

  export type UserMinAggregateInputType = {
    user_id?: true
    user_email?: true
    user_password?: true
    user_first_name?: true
    user_last_name?: true
  }

  export type UserMaxAggregateInputType = {
    user_id?: true
    user_email?: true
    user_password?: true
    user_first_name?: true
    user_last_name?: true
  }

  export type UserCountAggregateInputType = {
    user_id?: true
    user_email?: true
    user_password?: true
    user_first_name?: true
    user_last_name?: true
    _all?: true
  }

  export type UserAggregateArgs = {
    /**
     * Filter which User to aggregate.
     * 
    **/
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     * 
    **/
    orderBy?: Enumerable<UserOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_count`
    **/
    count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_avg`
    **/
    avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_sum`
    **/
    sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_min`
    **/
    min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_max`
    **/
    max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }


    
    
  export type UserGroupByArgs = {
    where?: UserWhereInput
    orderBy?: Enumerable<UserOrderByInput>
    by: Array<UserScalarFieldEnum>
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }


  export type UserGroupByOutputType = {
    user_id: number
    user_email: string
    user_password: string
    user_first_name: string
    user_last_name: string
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Promise<
    Array<
      PickArray<UserGroupByOutputType, T['by']> & 
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count' 
            ? T[P] extends boolean 
              ? number 
              : GetScalarType<T[P], UserGroupByOutputType[P]> 
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      > 
    >


  export type UserSelect = {
    user_id?: boolean
    user_email?: boolean
    user_password?: boolean
    user_first_name?: boolean
    user_last_name?: boolean
    user_list_evals?: boolean | EvaluationFindManyArgs
  }

  export type UserInclude = {
    user_list_evals?: boolean | EvaluationFindManyArgs
  }

  export type UserGetPayload<
    S extends boolean | null | undefined | UserArgs,
    U = keyof S
      > = S extends true
        ? User
    : S extends undefined
    ? never
    : S extends UserArgs | UserFindManyArgs
    ?'include' extends U
    ? User  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'user_list_evals'
        ? Array < EvaluationGetPayload<S['include'][P]>>  : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof User ?User [P]
  : 
          P extends 'user_list_evals'
        ? Array < EvaluationGetPayload<S['select'][P]>>  : never
  } 
    : User
  : User


  type UserCountArgs = Merge<
    Omit<UserFindManyArgs, 'select' | 'include'> & {
      select?: UserCountAggregateInputType | true
    }
  >

  export interface UserDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends UserFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, UserFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'User'> extends True ? CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>> : CheckSelect<T, Prisma__UserClient<User | null >, Prisma__UserClient<UserGetPayload<T> | null >>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends UserFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, UserFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'User'> extends True ? CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>> : CheckSelect<T, Prisma__UserClient<User | null >, Prisma__UserClient<UserGetPayload<T> | null >>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `user_id`
     * const userWithUser_idOnly = await prisma.user.findMany({ select: { user_id: true } })
     * 
    **/
    findMany<T extends UserFindManyArgs>(
      args?: SelectSubset<T, UserFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<User>>, PrismaPromise<Array<UserGetPayload<T>>>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
    **/
    create<T extends UserCreateArgs>(
      args: SelectSubset<T, UserCreateArgs>
    ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>

    /**
     * Create many Users.
     *     @param {UserCreateManyArgs} args - Arguments to create many Users.
     *     @example
     *     // Create many Users
     *     const user = await prisma.user.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends UserCreateManyArgs>(
      args?: SelectSubset<T, UserCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
    **/
    delete<T extends UserDeleteArgs>(
      args: SelectSubset<T, UserDeleteArgs>
    ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UserUpdateArgs>(
      args: SelectSubset<T, UserUpdateArgs>
    ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UserDeleteManyArgs>(
      args?: SelectSubset<T, UserDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UserUpdateManyArgs>(
      args: SelectSubset<T, UserUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
    **/
    upsert<T extends UserUpsertArgs>(
      args: SelectSubset<T, UserUpsertArgs>
    ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>

    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Promise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__UserClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    user_list_evals<T extends EvaluationFindManyArgs = {}>(args?: Subset<T, EvaluationFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Evaluation>>, PrismaPromise<Array<EvaluationGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * User findUnique
   */
  export type UserFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * Throw an Error if a User can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which User to fetch.
     * 
    **/
    where: UserWhereUniqueInput
  }


  /**
   * User findFirst
   */
  export type UserFindFirstArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * Throw an Error if a User can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which User to fetch.
     * 
    **/
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     * 
    **/
    orderBy?: Enumerable<UserOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     * 
    **/
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     * 
    **/
    distinct?: Enumerable<UserScalarFieldEnum>
  }


  /**
   * User findMany
   */
  export type UserFindManyArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * Filter, which Users to fetch.
     * 
    **/
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     * 
    **/
    orderBy?: Enumerable<UserOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     * 
    **/
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     * 
    **/
    skip?: number
    distinct?: Enumerable<UserScalarFieldEnum>
  }


  /**
   * User create
   */
  export type UserCreateArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * The data needed to create a User.
     * 
    **/
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }


  /**
   * User createMany
   */
  export type UserCreateManyArgs = {
    data: Enumerable<UserCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * User update
   */
  export type UserUpdateArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * The data needed to update a User.
     * 
    **/
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     * 
    **/
    where: UserWhereUniqueInput
  }


  /**
   * User updateMany
   */
  export type UserUpdateManyArgs = {
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    where?: UserWhereInput
  }


  /**
   * User upsert
   */
  export type UserUpsertArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * The filter to search for the User to update in case it exists.
     * 
    **/
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     * 
    **/
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }


  /**
   * User delete
   */
  export type UserDeleteArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * Filter which User to delete.
     * 
    **/
    where: UserWhereUniqueInput
  }


  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs = {
    where?: UserWhereInput
  }


  /**
   * User without action
   */
  export type UserArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
  }



  /**
   * Model Evaluation
   */


  export type AggregateEvaluation = {
    _count: EvaluationCountAggregateOutputType | null
    count: EvaluationCountAggregateOutputType | null
    _avg: EvaluationAvgAggregateOutputType | null
    avg: EvaluationAvgAggregateOutputType | null
    _sum: EvaluationSumAggregateOutputType | null
    sum: EvaluationSumAggregateOutputType | null
    _min: EvaluationMinAggregateOutputType | null
    min: EvaluationMinAggregateOutputType | null
    _max: EvaluationMaxAggregateOutputType | null
    max: EvaluationMaxAggregateOutputType | null
  }

  export type EvaluationAvgAggregateOutputType = {
    eval_id: number | null
    eval_user_id: number | null
  }

  export type EvaluationSumAggregateOutputType = {
    eval_id: number | null
    eval_user_id: number | null
  }

  export type EvaluationMinAggregateOutputType = {
    eval_id: number | null
    eval_date: Date | null
    eval_user_id: number | null
  }

  export type EvaluationMaxAggregateOutputType = {
    eval_id: number | null
    eval_date: Date | null
    eval_user_id: number | null
  }

  export type EvaluationCountAggregateOutputType = {
    eval_id: number
    eval_date: number
    eval_user_id: number
    _all: number
  }


  export type EvaluationAvgAggregateInputType = {
    eval_id?: true
    eval_user_id?: true
  }

  export type EvaluationSumAggregateInputType = {
    eval_id?: true
    eval_user_id?: true
  }

  export type EvaluationMinAggregateInputType = {
    eval_id?: true
    eval_date?: true
    eval_user_id?: true
  }

  export type EvaluationMaxAggregateInputType = {
    eval_id?: true
    eval_date?: true
    eval_user_id?: true
  }

  export type EvaluationCountAggregateInputType = {
    eval_id?: true
    eval_date?: true
    eval_user_id?: true
    _all?: true
  }

  export type EvaluationAggregateArgs = {
    /**
     * Filter which Evaluation to aggregate.
     * 
    **/
    where?: EvaluationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Evaluations to fetch.
     * 
    **/
    orderBy?: Enumerable<EvaluationOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: EvaluationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Evaluations from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Evaluations.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Evaluations
    **/
    _count?: true | EvaluationCountAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_count`
    **/
    count?: true | EvaluationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: EvaluationAvgAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_avg`
    **/
    avg?: EvaluationAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: EvaluationSumAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_sum`
    **/
    sum?: EvaluationSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: EvaluationMinAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_min`
    **/
    min?: EvaluationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: EvaluationMaxAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_max`
    **/
    max?: EvaluationMaxAggregateInputType
  }

  export type GetEvaluationAggregateType<T extends EvaluationAggregateArgs> = {
        [P in keyof T & keyof AggregateEvaluation]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateEvaluation[P]>
      : GetScalarType<T[P], AggregateEvaluation[P]>
  }


    
    
  export type EvaluationGroupByArgs = {
    where?: EvaluationWhereInput
    orderBy?: Enumerable<EvaluationOrderByInput>
    by: Array<EvaluationScalarFieldEnum>
    having?: EvaluationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: EvaluationCountAggregateInputType | true
    _avg?: EvaluationAvgAggregateInputType
    _sum?: EvaluationSumAggregateInputType
    _min?: EvaluationMinAggregateInputType
    _max?: EvaluationMaxAggregateInputType
  }


  export type EvaluationGroupByOutputType = {
    eval_id: number
    eval_date: Date
    eval_user_id: number
    _count: EvaluationCountAggregateOutputType | null
    _avg: EvaluationAvgAggregateOutputType | null
    _sum: EvaluationSumAggregateOutputType | null
    _min: EvaluationMinAggregateOutputType | null
    _max: EvaluationMaxAggregateOutputType | null
  }

  type GetEvaluationGroupByPayload<T extends EvaluationGroupByArgs> = Promise<
    Array<
      PickArray<EvaluationGroupByOutputType, T['by']> & 
        {
          [P in ((keyof T) & (keyof EvaluationGroupByOutputType))]: P extends '_count' 
            ? T[P] extends boolean 
              ? number 
              : GetScalarType<T[P], EvaluationGroupByOutputType[P]> 
            : GetScalarType<T[P], EvaluationGroupByOutputType[P]>
        }
      > 
    >


  export type EvaluationSelect = {
    eval_id?: boolean
    eval_date?: boolean
    eval_user?: boolean | UserArgs
    eval_user_id?: boolean
    eval_list_notes?: boolean | NoterFindManyArgs
  }

  export type EvaluationInclude = {
    eval_user?: boolean | UserArgs
    eval_list_notes?: boolean | NoterFindManyArgs
  }

  export type EvaluationGetPayload<
    S extends boolean | null | undefined | EvaluationArgs,
    U = keyof S
      > = S extends true
        ? Evaluation
    : S extends undefined
    ? never
    : S extends EvaluationArgs | EvaluationFindManyArgs
    ?'include' extends U
    ? Evaluation  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'eval_user'
        ? UserGetPayload<S['include'][P]> :
        P extends 'eval_list_notes'
        ? Array < NoterGetPayload<S['include'][P]>>  : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof Evaluation ?Evaluation [P]
  : 
          P extends 'eval_user'
        ? UserGetPayload<S['select'][P]> :
        P extends 'eval_list_notes'
        ? Array < NoterGetPayload<S['select'][P]>>  : never
  } 
    : Evaluation
  : Evaluation


  type EvaluationCountArgs = Merge<
    Omit<EvaluationFindManyArgs, 'select' | 'include'> & {
      select?: EvaluationCountAggregateInputType | true
    }
  >

  export interface EvaluationDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Evaluation that matches the filter.
     * @param {EvaluationFindUniqueArgs} args - Arguments to find a Evaluation
     * @example
     * // Get one Evaluation
     * const evaluation = await prisma.evaluation.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends EvaluationFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, EvaluationFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Evaluation'> extends True ? CheckSelect<T, Prisma__EvaluationClient<Evaluation>, Prisma__EvaluationClient<EvaluationGetPayload<T>>> : CheckSelect<T, Prisma__EvaluationClient<Evaluation | null >, Prisma__EvaluationClient<EvaluationGetPayload<T> | null >>

    /**
     * Find the first Evaluation that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EvaluationFindFirstArgs} args - Arguments to find a Evaluation
     * @example
     * // Get one Evaluation
     * const evaluation = await prisma.evaluation.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends EvaluationFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, EvaluationFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Evaluation'> extends True ? CheckSelect<T, Prisma__EvaluationClient<Evaluation>, Prisma__EvaluationClient<EvaluationGetPayload<T>>> : CheckSelect<T, Prisma__EvaluationClient<Evaluation | null >, Prisma__EvaluationClient<EvaluationGetPayload<T> | null >>

    /**
     * Find zero or more Evaluations that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EvaluationFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Evaluations
     * const evaluations = await prisma.evaluation.findMany()
     * 
     * // Get first 10 Evaluations
     * const evaluations = await prisma.evaluation.findMany({ take: 10 })
     * 
     * // Only select the `eval_id`
     * const evaluationWithEval_idOnly = await prisma.evaluation.findMany({ select: { eval_id: true } })
     * 
    **/
    findMany<T extends EvaluationFindManyArgs>(
      args?: SelectSubset<T, EvaluationFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Evaluation>>, PrismaPromise<Array<EvaluationGetPayload<T>>>>

    /**
     * Create a Evaluation.
     * @param {EvaluationCreateArgs} args - Arguments to create a Evaluation.
     * @example
     * // Create one Evaluation
     * const Evaluation = await prisma.evaluation.create({
     *   data: {
     *     // ... data to create a Evaluation
     *   }
     * })
     * 
    **/
    create<T extends EvaluationCreateArgs>(
      args: SelectSubset<T, EvaluationCreateArgs>
    ): CheckSelect<T, Prisma__EvaluationClient<Evaluation>, Prisma__EvaluationClient<EvaluationGetPayload<T>>>

    /**
     * Create many Evaluations.
     *     @param {EvaluationCreateManyArgs} args - Arguments to create many Evaluations.
     *     @example
     *     // Create many Evaluations
     *     const evaluation = await prisma.evaluation.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends EvaluationCreateManyArgs>(
      args?: SelectSubset<T, EvaluationCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Evaluation.
     * @param {EvaluationDeleteArgs} args - Arguments to delete one Evaluation.
     * @example
     * // Delete one Evaluation
     * const Evaluation = await prisma.evaluation.delete({
     *   where: {
     *     // ... filter to delete one Evaluation
     *   }
     * })
     * 
    **/
    delete<T extends EvaluationDeleteArgs>(
      args: SelectSubset<T, EvaluationDeleteArgs>
    ): CheckSelect<T, Prisma__EvaluationClient<Evaluation>, Prisma__EvaluationClient<EvaluationGetPayload<T>>>

    /**
     * Update one Evaluation.
     * @param {EvaluationUpdateArgs} args - Arguments to update one Evaluation.
     * @example
     * // Update one Evaluation
     * const evaluation = await prisma.evaluation.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends EvaluationUpdateArgs>(
      args: SelectSubset<T, EvaluationUpdateArgs>
    ): CheckSelect<T, Prisma__EvaluationClient<Evaluation>, Prisma__EvaluationClient<EvaluationGetPayload<T>>>

    /**
     * Delete zero or more Evaluations.
     * @param {EvaluationDeleteManyArgs} args - Arguments to filter Evaluations to delete.
     * @example
     * // Delete a few Evaluations
     * const { count } = await prisma.evaluation.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends EvaluationDeleteManyArgs>(
      args?: SelectSubset<T, EvaluationDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Evaluations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EvaluationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Evaluations
     * const evaluation = await prisma.evaluation.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends EvaluationUpdateManyArgs>(
      args: SelectSubset<T, EvaluationUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Evaluation.
     * @param {EvaluationUpsertArgs} args - Arguments to update or create a Evaluation.
     * @example
     * // Update or create a Evaluation
     * const evaluation = await prisma.evaluation.upsert({
     *   create: {
     *     // ... data to create a Evaluation
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Evaluation we want to update
     *   }
     * })
    **/
    upsert<T extends EvaluationUpsertArgs>(
      args: SelectSubset<T, EvaluationUpsertArgs>
    ): CheckSelect<T, Prisma__EvaluationClient<Evaluation>, Prisma__EvaluationClient<EvaluationGetPayload<T>>>

    /**
     * Count the number of Evaluations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EvaluationCountArgs} args - Arguments to filter Evaluations to count.
     * @example
     * // Count the number of Evaluations
     * const count = await prisma.evaluation.count({
     *   where: {
     *     // ... the filter for the Evaluations we want to count
     *   }
     * })
    **/
    count<T extends EvaluationCountArgs>(
      args?: Subset<T, EvaluationCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], EvaluationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Evaluation.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EvaluationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends EvaluationAggregateArgs>(args: Subset<T, EvaluationAggregateArgs>): PrismaPromise<GetEvaluationAggregateType<T>>

    /**
     * Group by Evaluation.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EvaluationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends EvaluationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: EvaluationGroupByArgs['orderBy'] }
        : { orderBy?: EvaluationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, EvaluationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetEvaluationGroupByPayload<T> : Promise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for Evaluation.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__EvaluationClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    eval_user<T extends UserArgs = {}>(args?: Subset<T, UserArgs>): CheckSelect<T, Prisma__UserClient<User | null >, Prisma__UserClient<UserGetPayload<T> | null >>;

    eval_list_notes<T extends NoterFindManyArgs = {}>(args?: Subset<T, NoterFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Noter>>, PrismaPromise<Array<NoterGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Evaluation findUnique
   */
  export type EvaluationFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the Evaluation
     * 
    **/
    select?: EvaluationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: EvaluationInclude | null
    /**
     * Throw an Error if a Evaluation can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Evaluation to fetch.
     * 
    **/
    where: EvaluationWhereUniqueInput
  }


  /**
   * Evaluation findFirst
   */
  export type EvaluationFindFirstArgs = {
    /**
     * Select specific fields to fetch from the Evaluation
     * 
    **/
    select?: EvaluationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: EvaluationInclude | null
    /**
     * Throw an Error if a Evaluation can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Evaluation to fetch.
     * 
    **/
    where?: EvaluationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Evaluations to fetch.
     * 
    **/
    orderBy?: Enumerable<EvaluationOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Evaluations.
     * 
    **/
    cursor?: EvaluationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Evaluations from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Evaluations.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Evaluations.
     * 
    **/
    distinct?: Enumerable<EvaluationScalarFieldEnum>
  }


  /**
   * Evaluation findMany
   */
  export type EvaluationFindManyArgs = {
    /**
     * Select specific fields to fetch from the Evaluation
     * 
    **/
    select?: EvaluationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: EvaluationInclude | null
    /**
     * Filter, which Evaluations to fetch.
     * 
    **/
    where?: EvaluationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Evaluations to fetch.
     * 
    **/
    orderBy?: Enumerable<EvaluationOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Evaluations.
     * 
    **/
    cursor?: EvaluationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Evaluations from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Evaluations.
     * 
    **/
    skip?: number
    distinct?: Enumerable<EvaluationScalarFieldEnum>
  }


  /**
   * Evaluation create
   */
  export type EvaluationCreateArgs = {
    /**
     * Select specific fields to fetch from the Evaluation
     * 
    **/
    select?: EvaluationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: EvaluationInclude | null
    /**
     * The data needed to create a Evaluation.
     * 
    **/
    data: XOR<EvaluationCreateInput, EvaluationUncheckedCreateInput>
  }


  /**
   * Evaluation createMany
   */
  export type EvaluationCreateManyArgs = {
    data: Enumerable<EvaluationCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Evaluation update
   */
  export type EvaluationUpdateArgs = {
    /**
     * Select specific fields to fetch from the Evaluation
     * 
    **/
    select?: EvaluationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: EvaluationInclude | null
    /**
     * The data needed to update a Evaluation.
     * 
    **/
    data: XOR<EvaluationUpdateInput, EvaluationUncheckedUpdateInput>
    /**
     * Choose, which Evaluation to update.
     * 
    **/
    where: EvaluationWhereUniqueInput
  }


  /**
   * Evaluation updateMany
   */
  export type EvaluationUpdateManyArgs = {
    data: XOR<EvaluationUpdateManyMutationInput, EvaluationUncheckedUpdateManyInput>
    where?: EvaluationWhereInput
  }


  /**
   * Evaluation upsert
   */
  export type EvaluationUpsertArgs = {
    /**
     * Select specific fields to fetch from the Evaluation
     * 
    **/
    select?: EvaluationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: EvaluationInclude | null
    /**
     * The filter to search for the Evaluation to update in case it exists.
     * 
    **/
    where: EvaluationWhereUniqueInput
    /**
     * In case the Evaluation found by the `where` argument doesn't exist, create a new Evaluation with this data.
     * 
    **/
    create: XOR<EvaluationCreateInput, EvaluationUncheckedCreateInput>
    /**
     * In case the Evaluation was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<EvaluationUpdateInput, EvaluationUncheckedUpdateInput>
  }


  /**
   * Evaluation delete
   */
  export type EvaluationDeleteArgs = {
    /**
     * Select specific fields to fetch from the Evaluation
     * 
    **/
    select?: EvaluationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: EvaluationInclude | null
    /**
     * Filter which Evaluation to delete.
     * 
    **/
    where: EvaluationWhereUniqueInput
  }


  /**
   * Evaluation deleteMany
   */
  export type EvaluationDeleteManyArgs = {
    where?: EvaluationWhereInput
  }


  /**
   * Evaluation without action
   */
  export type EvaluationArgs = {
    /**
     * Select specific fields to fetch from the Evaluation
     * 
    **/
    select?: EvaluationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: EvaluationInclude | null
  }



  /**
   * Model Noter
   */


  export type AggregateNoter = {
    _count: NoterCountAggregateOutputType | null
    count: NoterCountAggregateOutputType | null
    _avg: NoterAvgAggregateOutputType | null
    avg: NoterAvgAggregateOutputType | null
    _sum: NoterSumAggregateOutputType | null
    sum: NoterSumAggregateOutputType | null
    _min: NoterMinAggregateOutputType | null
    min: NoterMinAggregateOutputType | null
    _max: NoterMaxAggregateOutputType | null
    max: NoterMaxAggregateOutputType | null
  }

  export type NoterAvgAggregateOutputType = {
    noter_eval_id: number | null
    noter_item_id: number | null
    noter_value: number | null
  }

  export type NoterSumAggregateOutputType = {
    noter_eval_id: number | null
    noter_item_id: number | null
    noter_value: number | null
  }

  export type NoterMinAggregateOutputType = {
    noter_eval_id: number | null
    noter_item_id: number | null
    noter_value: number | null
  }

  export type NoterMaxAggregateOutputType = {
    noter_eval_id: number | null
    noter_item_id: number | null
    noter_value: number | null
  }

  export type NoterCountAggregateOutputType = {
    noter_eval_id: number
    noter_item_id: number
    noter_value: number
    _all: number
  }


  export type NoterAvgAggregateInputType = {
    noter_eval_id?: true
    noter_item_id?: true
    noter_value?: true
  }

  export type NoterSumAggregateInputType = {
    noter_eval_id?: true
    noter_item_id?: true
    noter_value?: true
  }

  export type NoterMinAggregateInputType = {
    noter_eval_id?: true
    noter_item_id?: true
    noter_value?: true
  }

  export type NoterMaxAggregateInputType = {
    noter_eval_id?: true
    noter_item_id?: true
    noter_value?: true
  }

  export type NoterCountAggregateInputType = {
    noter_eval_id?: true
    noter_item_id?: true
    noter_value?: true
    _all?: true
  }

  export type NoterAggregateArgs = {
    /**
     * Filter which Noter to aggregate.
     * 
    **/
    where?: NoterWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Noters to fetch.
     * 
    **/
    orderBy?: Enumerable<NoterOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: NoterWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Noters from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Noters.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Noters
    **/
    _count?: true | NoterCountAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_count`
    **/
    count?: true | NoterCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: NoterAvgAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_avg`
    **/
    avg?: NoterAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: NoterSumAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_sum`
    **/
    sum?: NoterSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: NoterMinAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_min`
    **/
    min?: NoterMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: NoterMaxAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_max`
    **/
    max?: NoterMaxAggregateInputType
  }

  export type GetNoterAggregateType<T extends NoterAggregateArgs> = {
        [P in keyof T & keyof AggregateNoter]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateNoter[P]>
      : GetScalarType<T[P], AggregateNoter[P]>
  }


    
    
  export type NoterGroupByArgs = {
    where?: NoterWhereInput
    orderBy?: Enumerable<NoterOrderByInput>
    by: Array<NoterScalarFieldEnum>
    having?: NoterScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: NoterCountAggregateInputType | true
    _avg?: NoterAvgAggregateInputType
    _sum?: NoterSumAggregateInputType
    _min?: NoterMinAggregateInputType
    _max?: NoterMaxAggregateInputType
  }


  export type NoterGroupByOutputType = {
    noter_eval_id: number
    noter_item_id: number
    noter_value: number
    _count: NoterCountAggregateOutputType | null
    _avg: NoterAvgAggregateOutputType | null
    _sum: NoterSumAggregateOutputType | null
    _min: NoterMinAggregateOutputType | null
    _max: NoterMaxAggregateOutputType | null
  }

  type GetNoterGroupByPayload<T extends NoterGroupByArgs> = Promise<
    Array<
      PickArray<NoterGroupByOutputType, T['by']> & 
        {
          [P in ((keyof T) & (keyof NoterGroupByOutputType))]: P extends '_count' 
            ? T[P] extends boolean 
              ? number 
              : GetScalarType<T[P], NoterGroupByOutputType[P]> 
            : GetScalarType<T[P], NoterGroupByOutputType[P]>
        }
      > 
    >


  export type NoterSelect = {
    noter_eval_id?: boolean
    noter_eval?: boolean | EvaluationArgs
    noter_item_id?: boolean
    noter_item?: boolean | ItemArgs
    noter_value?: boolean
  }

  export type NoterInclude = {
    noter_eval?: boolean | EvaluationArgs
    noter_item?: boolean | ItemArgs
  }

  export type NoterGetPayload<
    S extends boolean | null | undefined | NoterArgs,
    U = keyof S
      > = S extends true
        ? Noter
    : S extends undefined
    ? never
    : S extends NoterArgs | NoterFindManyArgs
    ?'include' extends U
    ? Noter  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'noter_eval'
        ? EvaluationGetPayload<S['include'][P]> :
        P extends 'noter_item'
        ? ItemGetPayload<S['include'][P]> : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof Noter ?Noter [P]
  : 
          P extends 'noter_eval'
        ? EvaluationGetPayload<S['select'][P]> :
        P extends 'noter_item'
        ? ItemGetPayload<S['select'][P]> : never
  } 
    : Noter
  : Noter


  type NoterCountArgs = Merge<
    Omit<NoterFindManyArgs, 'select' | 'include'> & {
      select?: NoterCountAggregateInputType | true
    }
  >

  export interface NoterDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Noter that matches the filter.
     * @param {NoterFindUniqueArgs} args - Arguments to find a Noter
     * @example
     * // Get one Noter
     * const noter = await prisma.noter.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends NoterFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, NoterFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Noter'> extends True ? CheckSelect<T, Prisma__NoterClient<Noter>, Prisma__NoterClient<NoterGetPayload<T>>> : CheckSelect<T, Prisma__NoterClient<Noter | null >, Prisma__NoterClient<NoterGetPayload<T> | null >>

    /**
     * Find the first Noter that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NoterFindFirstArgs} args - Arguments to find a Noter
     * @example
     * // Get one Noter
     * const noter = await prisma.noter.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends NoterFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, NoterFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Noter'> extends True ? CheckSelect<T, Prisma__NoterClient<Noter>, Prisma__NoterClient<NoterGetPayload<T>>> : CheckSelect<T, Prisma__NoterClient<Noter | null >, Prisma__NoterClient<NoterGetPayload<T> | null >>

    /**
     * Find zero or more Noters that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NoterFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Noters
     * const noters = await prisma.noter.findMany()
     * 
     * // Get first 10 Noters
     * const noters = await prisma.noter.findMany({ take: 10 })
     * 
     * // Only select the `noter_eval_id`
     * const noterWithNoter_eval_idOnly = await prisma.noter.findMany({ select: { noter_eval_id: true } })
     * 
    **/
    findMany<T extends NoterFindManyArgs>(
      args?: SelectSubset<T, NoterFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Noter>>, PrismaPromise<Array<NoterGetPayload<T>>>>

    /**
     * Create a Noter.
     * @param {NoterCreateArgs} args - Arguments to create a Noter.
     * @example
     * // Create one Noter
     * const Noter = await prisma.noter.create({
     *   data: {
     *     // ... data to create a Noter
     *   }
     * })
     * 
    **/
    create<T extends NoterCreateArgs>(
      args: SelectSubset<T, NoterCreateArgs>
    ): CheckSelect<T, Prisma__NoterClient<Noter>, Prisma__NoterClient<NoterGetPayload<T>>>

    /**
     * Create many Noters.
     *     @param {NoterCreateManyArgs} args - Arguments to create many Noters.
     *     @example
     *     // Create many Noters
     *     const noter = await prisma.noter.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends NoterCreateManyArgs>(
      args?: SelectSubset<T, NoterCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Noter.
     * @param {NoterDeleteArgs} args - Arguments to delete one Noter.
     * @example
     * // Delete one Noter
     * const Noter = await prisma.noter.delete({
     *   where: {
     *     // ... filter to delete one Noter
     *   }
     * })
     * 
    **/
    delete<T extends NoterDeleteArgs>(
      args: SelectSubset<T, NoterDeleteArgs>
    ): CheckSelect<T, Prisma__NoterClient<Noter>, Prisma__NoterClient<NoterGetPayload<T>>>

    /**
     * Update one Noter.
     * @param {NoterUpdateArgs} args - Arguments to update one Noter.
     * @example
     * // Update one Noter
     * const noter = await prisma.noter.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends NoterUpdateArgs>(
      args: SelectSubset<T, NoterUpdateArgs>
    ): CheckSelect<T, Prisma__NoterClient<Noter>, Prisma__NoterClient<NoterGetPayload<T>>>

    /**
     * Delete zero or more Noters.
     * @param {NoterDeleteManyArgs} args - Arguments to filter Noters to delete.
     * @example
     * // Delete a few Noters
     * const { count } = await prisma.noter.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends NoterDeleteManyArgs>(
      args?: SelectSubset<T, NoterDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Noters.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NoterUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Noters
     * const noter = await prisma.noter.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends NoterUpdateManyArgs>(
      args: SelectSubset<T, NoterUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Noter.
     * @param {NoterUpsertArgs} args - Arguments to update or create a Noter.
     * @example
     * // Update or create a Noter
     * const noter = await prisma.noter.upsert({
     *   create: {
     *     // ... data to create a Noter
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Noter we want to update
     *   }
     * })
    **/
    upsert<T extends NoterUpsertArgs>(
      args: SelectSubset<T, NoterUpsertArgs>
    ): CheckSelect<T, Prisma__NoterClient<Noter>, Prisma__NoterClient<NoterGetPayload<T>>>

    /**
     * Count the number of Noters.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NoterCountArgs} args - Arguments to filter Noters to count.
     * @example
     * // Count the number of Noters
     * const count = await prisma.noter.count({
     *   where: {
     *     // ... the filter for the Noters we want to count
     *   }
     * })
    **/
    count<T extends NoterCountArgs>(
      args?: Subset<T, NoterCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], NoterCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Noter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NoterAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends NoterAggregateArgs>(args: Subset<T, NoterAggregateArgs>): PrismaPromise<GetNoterAggregateType<T>>

    /**
     * Group by Noter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NoterGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends NoterGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: NoterGroupByArgs['orderBy'] }
        : { orderBy?: NoterGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, NoterGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetNoterGroupByPayload<T> : Promise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for Noter.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__NoterClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    noter_eval<T extends EvaluationArgs = {}>(args?: Subset<T, EvaluationArgs>): CheckSelect<T, Prisma__EvaluationClient<Evaluation | null >, Prisma__EvaluationClient<EvaluationGetPayload<T> | null >>;

    noter_item<T extends ItemArgs = {}>(args?: Subset<T, ItemArgs>): CheckSelect<T, Prisma__ItemClient<Item | null >, Prisma__ItemClient<ItemGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Noter findUnique
   */
  export type NoterFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the Noter
     * 
    **/
    select?: NoterSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: NoterInclude | null
    /**
     * Throw an Error if a Noter can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Noter to fetch.
     * 
    **/
    where: NoterWhereUniqueInput
  }


  /**
   * Noter findFirst
   */
  export type NoterFindFirstArgs = {
    /**
     * Select specific fields to fetch from the Noter
     * 
    **/
    select?: NoterSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: NoterInclude | null
    /**
     * Throw an Error if a Noter can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Noter to fetch.
     * 
    **/
    where?: NoterWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Noters to fetch.
     * 
    **/
    orderBy?: Enumerable<NoterOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Noters.
     * 
    **/
    cursor?: NoterWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Noters from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Noters.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Noters.
     * 
    **/
    distinct?: Enumerable<NoterScalarFieldEnum>
  }


  /**
   * Noter findMany
   */
  export type NoterFindManyArgs = {
    /**
     * Select specific fields to fetch from the Noter
     * 
    **/
    select?: NoterSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: NoterInclude | null
    /**
     * Filter, which Noters to fetch.
     * 
    **/
    where?: NoterWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Noters to fetch.
     * 
    **/
    orderBy?: Enumerable<NoterOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Noters.
     * 
    **/
    cursor?: NoterWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Noters from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Noters.
     * 
    **/
    skip?: number
    distinct?: Enumerable<NoterScalarFieldEnum>
  }


  /**
   * Noter create
   */
  export type NoterCreateArgs = {
    /**
     * Select specific fields to fetch from the Noter
     * 
    **/
    select?: NoterSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: NoterInclude | null
    /**
     * The data needed to create a Noter.
     * 
    **/
    data: XOR<NoterCreateInput, NoterUncheckedCreateInput>
  }


  /**
   * Noter createMany
   */
  export type NoterCreateManyArgs = {
    data: Enumerable<NoterCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Noter update
   */
  export type NoterUpdateArgs = {
    /**
     * Select specific fields to fetch from the Noter
     * 
    **/
    select?: NoterSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: NoterInclude | null
    /**
     * The data needed to update a Noter.
     * 
    **/
    data: XOR<NoterUpdateInput, NoterUncheckedUpdateInput>
    /**
     * Choose, which Noter to update.
     * 
    **/
    where: NoterWhereUniqueInput
  }


  /**
   * Noter updateMany
   */
  export type NoterUpdateManyArgs = {
    data: XOR<NoterUpdateManyMutationInput, NoterUncheckedUpdateManyInput>
    where?: NoterWhereInput
  }


  /**
   * Noter upsert
   */
  export type NoterUpsertArgs = {
    /**
     * Select specific fields to fetch from the Noter
     * 
    **/
    select?: NoterSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: NoterInclude | null
    /**
     * The filter to search for the Noter to update in case it exists.
     * 
    **/
    where: NoterWhereUniqueInput
    /**
     * In case the Noter found by the `where` argument doesn't exist, create a new Noter with this data.
     * 
    **/
    create: XOR<NoterCreateInput, NoterUncheckedCreateInput>
    /**
     * In case the Noter was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<NoterUpdateInput, NoterUncheckedUpdateInput>
  }


  /**
   * Noter delete
   */
  export type NoterDeleteArgs = {
    /**
     * Select specific fields to fetch from the Noter
     * 
    **/
    select?: NoterSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: NoterInclude | null
    /**
     * Filter which Noter to delete.
     * 
    **/
    where: NoterWhereUniqueInput
  }


  /**
   * Noter deleteMany
   */
  export type NoterDeleteManyArgs = {
    where?: NoterWhereInput
  }


  /**
   * Noter without action
   */
  export type NoterArgs = {
    /**
     * Select specific fields to fetch from the Noter
     * 
    **/
    select?: NoterSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: NoterInclude | null
  }



  /**
   * Model Item
   */


  export type AggregateItem = {
    _count: ItemCountAggregateOutputType | null
    count: ItemCountAggregateOutputType | null
    _avg: ItemAvgAggregateOutputType | null
    avg: ItemAvgAggregateOutputType | null
    _sum: ItemSumAggregateOutputType | null
    sum: ItemSumAggregateOutputType | null
    _min: ItemMinAggregateOutputType | null
    min: ItemMinAggregateOutputType | null
    _max: ItemMaxAggregateOutputType | null
    max: ItemMaxAggregateOutputType | null
  }

  export type ItemAvgAggregateOutputType = {
    item_id: number | null
    item_skill_id: number | null
  }

  export type ItemSumAggregateOutputType = {
    item_id: number | null
    item_skill_id: number | null
  }

  export type ItemMinAggregateOutputType = {
    item_id: number | null
    item_title: string | null
    item_skill_id: number | null
  }

  export type ItemMaxAggregateOutputType = {
    item_id: number | null
    item_title: string | null
    item_skill_id: number | null
  }

  export type ItemCountAggregateOutputType = {
    item_id: number
    item_title: number
    item_skill_id: number
    _all: number
  }


  export type ItemAvgAggregateInputType = {
    item_id?: true
    item_skill_id?: true
  }

  export type ItemSumAggregateInputType = {
    item_id?: true
    item_skill_id?: true
  }

  export type ItemMinAggregateInputType = {
    item_id?: true
    item_title?: true
    item_skill_id?: true
  }

  export type ItemMaxAggregateInputType = {
    item_id?: true
    item_title?: true
    item_skill_id?: true
  }

  export type ItemCountAggregateInputType = {
    item_id?: true
    item_title?: true
    item_skill_id?: true
    _all?: true
  }

  export type ItemAggregateArgs = {
    /**
     * Filter which Item to aggregate.
     * 
    **/
    where?: ItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Items to fetch.
     * 
    **/
    orderBy?: Enumerable<ItemOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: ItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Items from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Items.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Items
    **/
    _count?: true | ItemCountAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_count`
    **/
    count?: true | ItemCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ItemAvgAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_avg`
    **/
    avg?: ItemAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ItemSumAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_sum`
    **/
    sum?: ItemSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ItemMinAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_min`
    **/
    min?: ItemMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ItemMaxAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_max`
    **/
    max?: ItemMaxAggregateInputType
  }

  export type GetItemAggregateType<T extends ItemAggregateArgs> = {
        [P in keyof T & keyof AggregateItem]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateItem[P]>
      : GetScalarType<T[P], AggregateItem[P]>
  }


    
    
  export type ItemGroupByArgs = {
    where?: ItemWhereInput
    orderBy?: Enumerable<ItemOrderByInput>
    by: Array<ItemScalarFieldEnum>
    having?: ItemScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ItemCountAggregateInputType | true
    _avg?: ItemAvgAggregateInputType
    _sum?: ItemSumAggregateInputType
    _min?: ItemMinAggregateInputType
    _max?: ItemMaxAggregateInputType
  }


  export type ItemGroupByOutputType = {
    item_id: number
    item_title: string
    item_skill_id: number
    _count: ItemCountAggregateOutputType | null
    _avg: ItemAvgAggregateOutputType | null
    _sum: ItemSumAggregateOutputType | null
    _min: ItemMinAggregateOutputType | null
    _max: ItemMaxAggregateOutputType | null
  }

  type GetItemGroupByPayload<T extends ItemGroupByArgs> = Promise<
    Array<
      PickArray<ItemGroupByOutputType, T['by']> & 
        {
          [P in ((keyof T) & (keyof ItemGroupByOutputType))]: P extends '_count' 
            ? T[P] extends boolean 
              ? number 
              : GetScalarType<T[P], ItemGroupByOutputType[P]> 
            : GetScalarType<T[P], ItemGroupByOutputType[P]>
        }
      > 
    >


  export type ItemSelect = {
    item_id?: boolean
    item_title?: boolean
    item_skill_id?: boolean
    item_skill?: boolean | SkillArgs
    item_list_notes?: boolean | NoterFindManyArgs
  }

  export type ItemInclude = {
    item_skill?: boolean | SkillArgs
    item_list_notes?: boolean | NoterFindManyArgs
  }

  export type ItemGetPayload<
    S extends boolean | null | undefined | ItemArgs,
    U = keyof S
      > = S extends true
        ? Item
    : S extends undefined
    ? never
    : S extends ItemArgs | ItemFindManyArgs
    ?'include' extends U
    ? Item  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'item_skill'
        ? SkillGetPayload<S['include'][P]> :
        P extends 'item_list_notes'
        ? Array < NoterGetPayload<S['include'][P]>>  : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof Item ?Item [P]
  : 
          P extends 'item_skill'
        ? SkillGetPayload<S['select'][P]> :
        P extends 'item_list_notes'
        ? Array < NoterGetPayload<S['select'][P]>>  : never
  } 
    : Item
  : Item


  type ItemCountArgs = Merge<
    Omit<ItemFindManyArgs, 'select' | 'include'> & {
      select?: ItemCountAggregateInputType | true
    }
  >

  export interface ItemDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Item that matches the filter.
     * @param {ItemFindUniqueArgs} args - Arguments to find a Item
     * @example
     * // Get one Item
     * const item = await prisma.item.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ItemFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, ItemFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Item'> extends True ? CheckSelect<T, Prisma__ItemClient<Item>, Prisma__ItemClient<ItemGetPayload<T>>> : CheckSelect<T, Prisma__ItemClient<Item | null >, Prisma__ItemClient<ItemGetPayload<T> | null >>

    /**
     * Find the first Item that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ItemFindFirstArgs} args - Arguments to find a Item
     * @example
     * // Get one Item
     * const item = await prisma.item.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ItemFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, ItemFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Item'> extends True ? CheckSelect<T, Prisma__ItemClient<Item>, Prisma__ItemClient<ItemGetPayload<T>>> : CheckSelect<T, Prisma__ItemClient<Item | null >, Prisma__ItemClient<ItemGetPayload<T> | null >>

    /**
     * Find zero or more Items that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ItemFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Items
     * const items = await prisma.item.findMany()
     * 
     * // Get first 10 Items
     * const items = await prisma.item.findMany({ take: 10 })
     * 
     * // Only select the `item_id`
     * const itemWithItem_idOnly = await prisma.item.findMany({ select: { item_id: true } })
     * 
    **/
    findMany<T extends ItemFindManyArgs>(
      args?: SelectSubset<T, ItemFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Item>>, PrismaPromise<Array<ItemGetPayload<T>>>>

    /**
     * Create a Item.
     * @param {ItemCreateArgs} args - Arguments to create a Item.
     * @example
     * // Create one Item
     * const Item = await prisma.item.create({
     *   data: {
     *     // ... data to create a Item
     *   }
     * })
     * 
    **/
    create<T extends ItemCreateArgs>(
      args: SelectSubset<T, ItemCreateArgs>
    ): CheckSelect<T, Prisma__ItemClient<Item>, Prisma__ItemClient<ItemGetPayload<T>>>

    /**
     * Create many Items.
     *     @param {ItemCreateManyArgs} args - Arguments to create many Items.
     *     @example
     *     // Create many Items
     *     const item = await prisma.item.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ItemCreateManyArgs>(
      args?: SelectSubset<T, ItemCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Item.
     * @param {ItemDeleteArgs} args - Arguments to delete one Item.
     * @example
     * // Delete one Item
     * const Item = await prisma.item.delete({
     *   where: {
     *     // ... filter to delete one Item
     *   }
     * })
     * 
    **/
    delete<T extends ItemDeleteArgs>(
      args: SelectSubset<T, ItemDeleteArgs>
    ): CheckSelect<T, Prisma__ItemClient<Item>, Prisma__ItemClient<ItemGetPayload<T>>>

    /**
     * Update one Item.
     * @param {ItemUpdateArgs} args - Arguments to update one Item.
     * @example
     * // Update one Item
     * const item = await prisma.item.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ItemUpdateArgs>(
      args: SelectSubset<T, ItemUpdateArgs>
    ): CheckSelect<T, Prisma__ItemClient<Item>, Prisma__ItemClient<ItemGetPayload<T>>>

    /**
     * Delete zero or more Items.
     * @param {ItemDeleteManyArgs} args - Arguments to filter Items to delete.
     * @example
     * // Delete a few Items
     * const { count } = await prisma.item.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ItemDeleteManyArgs>(
      args?: SelectSubset<T, ItemDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Items.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ItemUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Items
     * const item = await prisma.item.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ItemUpdateManyArgs>(
      args: SelectSubset<T, ItemUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Item.
     * @param {ItemUpsertArgs} args - Arguments to update or create a Item.
     * @example
     * // Update or create a Item
     * const item = await prisma.item.upsert({
     *   create: {
     *     // ... data to create a Item
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Item we want to update
     *   }
     * })
    **/
    upsert<T extends ItemUpsertArgs>(
      args: SelectSubset<T, ItemUpsertArgs>
    ): CheckSelect<T, Prisma__ItemClient<Item>, Prisma__ItemClient<ItemGetPayload<T>>>

    /**
     * Count the number of Items.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ItemCountArgs} args - Arguments to filter Items to count.
     * @example
     * // Count the number of Items
     * const count = await prisma.item.count({
     *   where: {
     *     // ... the filter for the Items we want to count
     *   }
     * })
    **/
    count<T extends ItemCountArgs>(
      args?: Subset<T, ItemCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ItemCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Item.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ItemAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ItemAggregateArgs>(args: Subset<T, ItemAggregateArgs>): PrismaPromise<GetItemAggregateType<T>>

    /**
     * Group by Item.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ItemGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ItemGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ItemGroupByArgs['orderBy'] }
        : { orderBy?: ItemGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ItemGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetItemGroupByPayload<T> : Promise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for Item.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__ItemClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    item_skill<T extends SkillArgs = {}>(args?: Subset<T, SkillArgs>): CheckSelect<T, Prisma__SkillClient<Skill | null >, Prisma__SkillClient<SkillGetPayload<T> | null >>;

    item_list_notes<T extends NoterFindManyArgs = {}>(args?: Subset<T, NoterFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Noter>>, PrismaPromise<Array<NoterGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Item findUnique
   */
  export type ItemFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the Item
     * 
    **/
    select?: ItemSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ItemInclude | null
    /**
     * Throw an Error if a Item can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Item to fetch.
     * 
    **/
    where: ItemWhereUniqueInput
  }


  /**
   * Item findFirst
   */
  export type ItemFindFirstArgs = {
    /**
     * Select specific fields to fetch from the Item
     * 
    **/
    select?: ItemSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ItemInclude | null
    /**
     * Throw an Error if a Item can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Item to fetch.
     * 
    **/
    where?: ItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Items to fetch.
     * 
    **/
    orderBy?: Enumerable<ItemOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Items.
     * 
    **/
    cursor?: ItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Items from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Items.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Items.
     * 
    **/
    distinct?: Enumerable<ItemScalarFieldEnum>
  }


  /**
   * Item findMany
   */
  export type ItemFindManyArgs = {
    /**
     * Select specific fields to fetch from the Item
     * 
    **/
    select?: ItemSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ItemInclude | null
    /**
     * Filter, which Items to fetch.
     * 
    **/
    where?: ItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Items to fetch.
     * 
    **/
    orderBy?: Enumerable<ItemOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Items.
     * 
    **/
    cursor?: ItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Items from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Items.
     * 
    **/
    skip?: number
    distinct?: Enumerable<ItemScalarFieldEnum>
  }


  /**
   * Item create
   */
  export type ItemCreateArgs = {
    /**
     * Select specific fields to fetch from the Item
     * 
    **/
    select?: ItemSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ItemInclude | null
    /**
     * The data needed to create a Item.
     * 
    **/
    data: XOR<ItemCreateInput, ItemUncheckedCreateInput>
  }


  /**
   * Item createMany
   */
  export type ItemCreateManyArgs = {
    data: Enumerable<ItemCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Item update
   */
  export type ItemUpdateArgs = {
    /**
     * Select specific fields to fetch from the Item
     * 
    **/
    select?: ItemSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ItemInclude | null
    /**
     * The data needed to update a Item.
     * 
    **/
    data: XOR<ItemUpdateInput, ItemUncheckedUpdateInput>
    /**
     * Choose, which Item to update.
     * 
    **/
    where: ItemWhereUniqueInput
  }


  /**
   * Item updateMany
   */
  export type ItemUpdateManyArgs = {
    data: XOR<ItemUpdateManyMutationInput, ItemUncheckedUpdateManyInput>
    where?: ItemWhereInput
  }


  /**
   * Item upsert
   */
  export type ItemUpsertArgs = {
    /**
     * Select specific fields to fetch from the Item
     * 
    **/
    select?: ItemSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ItemInclude | null
    /**
     * The filter to search for the Item to update in case it exists.
     * 
    **/
    where: ItemWhereUniqueInput
    /**
     * In case the Item found by the `where` argument doesn't exist, create a new Item with this data.
     * 
    **/
    create: XOR<ItemCreateInput, ItemUncheckedCreateInput>
    /**
     * In case the Item was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<ItemUpdateInput, ItemUncheckedUpdateInput>
  }


  /**
   * Item delete
   */
  export type ItemDeleteArgs = {
    /**
     * Select specific fields to fetch from the Item
     * 
    **/
    select?: ItemSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ItemInclude | null
    /**
     * Filter which Item to delete.
     * 
    **/
    where: ItemWhereUniqueInput
  }


  /**
   * Item deleteMany
   */
  export type ItemDeleteManyArgs = {
    where?: ItemWhereInput
  }


  /**
   * Item without action
   */
  export type ItemArgs = {
    /**
     * Select specific fields to fetch from the Item
     * 
    **/
    select?: ItemSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ItemInclude | null
  }



  /**
   * Model Skill
   */


  export type AggregateSkill = {
    _count: SkillCountAggregateOutputType | null
    count: SkillCountAggregateOutputType | null
    _avg: SkillAvgAggregateOutputType | null
    avg: SkillAvgAggregateOutputType | null
    _sum: SkillSumAggregateOutputType | null
    sum: SkillSumAggregateOutputType | null
    _min: SkillMinAggregateOutputType | null
    min: SkillMinAggregateOutputType | null
    _max: SkillMaxAggregateOutputType | null
    max: SkillMaxAggregateOutputType | null
  }

  export type SkillAvgAggregateOutputType = {
    skill_id: number | null
  }

  export type SkillSumAggregateOutputType = {
    skill_id: number | null
  }

  export type SkillMinAggregateOutputType = {
    skill_id: number | null
    skill_title: string | null
  }

  export type SkillMaxAggregateOutputType = {
    skill_id: number | null
    skill_title: string | null
  }

  export type SkillCountAggregateOutputType = {
    skill_id: number
    skill_title: number
    _all: number
  }


  export type SkillAvgAggregateInputType = {
    skill_id?: true
  }

  export type SkillSumAggregateInputType = {
    skill_id?: true
  }

  export type SkillMinAggregateInputType = {
    skill_id?: true
    skill_title?: true
  }

  export type SkillMaxAggregateInputType = {
    skill_id?: true
    skill_title?: true
  }

  export type SkillCountAggregateInputType = {
    skill_id?: true
    skill_title?: true
    _all?: true
  }

  export type SkillAggregateArgs = {
    /**
     * Filter which Skill to aggregate.
     * 
    **/
    where?: SkillWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Skills to fetch.
     * 
    **/
    orderBy?: Enumerable<SkillOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: SkillWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Skills from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Skills.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Skills
    **/
    _count?: true | SkillCountAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_count`
    **/
    count?: true | SkillCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SkillAvgAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_avg`
    **/
    avg?: SkillAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SkillSumAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_sum`
    **/
    sum?: SkillSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SkillMinAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_min`
    **/
    min?: SkillMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SkillMaxAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_max`
    **/
    max?: SkillMaxAggregateInputType
  }

  export type GetSkillAggregateType<T extends SkillAggregateArgs> = {
        [P in keyof T & keyof AggregateSkill]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSkill[P]>
      : GetScalarType<T[P], AggregateSkill[P]>
  }


    
    
  export type SkillGroupByArgs = {
    where?: SkillWhereInput
    orderBy?: Enumerable<SkillOrderByInput>
    by: Array<SkillScalarFieldEnum>
    having?: SkillScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SkillCountAggregateInputType | true
    _avg?: SkillAvgAggregateInputType
    _sum?: SkillSumAggregateInputType
    _min?: SkillMinAggregateInputType
    _max?: SkillMaxAggregateInputType
  }


  export type SkillGroupByOutputType = {
    skill_id: number
    skill_title: string
    _count: SkillCountAggregateOutputType | null
    _avg: SkillAvgAggregateOutputType | null
    _sum: SkillSumAggregateOutputType | null
    _min: SkillMinAggregateOutputType | null
    _max: SkillMaxAggregateOutputType | null
  }

  type GetSkillGroupByPayload<T extends SkillGroupByArgs> = Promise<
    Array<
      PickArray<SkillGroupByOutputType, T['by']> & 
        {
          [P in ((keyof T) & (keyof SkillGroupByOutputType))]: P extends '_count' 
            ? T[P] extends boolean 
              ? number 
              : GetScalarType<T[P], SkillGroupByOutputType[P]> 
            : GetScalarType<T[P], SkillGroupByOutputType[P]>
        }
      > 
    >


  export type SkillSelect = {
    skill_id?: boolean
    skill_title?: boolean
    skill_items?: boolean | ItemFindManyArgs
  }

  export type SkillInclude = {
    skill_items?: boolean | ItemFindManyArgs
  }

  export type SkillGetPayload<
    S extends boolean | null | undefined | SkillArgs,
    U = keyof S
      > = S extends true
        ? Skill
    : S extends undefined
    ? never
    : S extends SkillArgs | SkillFindManyArgs
    ?'include' extends U
    ? Skill  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'skill_items'
        ? Array < ItemGetPayload<S['include'][P]>>  : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof Skill ?Skill [P]
  : 
          P extends 'skill_items'
        ? Array < ItemGetPayload<S['select'][P]>>  : never
  } 
    : Skill
  : Skill


  type SkillCountArgs = Merge<
    Omit<SkillFindManyArgs, 'select' | 'include'> & {
      select?: SkillCountAggregateInputType | true
    }
  >

  export interface SkillDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Skill that matches the filter.
     * @param {SkillFindUniqueArgs} args - Arguments to find a Skill
     * @example
     * // Get one Skill
     * const skill = await prisma.skill.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends SkillFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, SkillFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Skill'> extends True ? CheckSelect<T, Prisma__SkillClient<Skill>, Prisma__SkillClient<SkillGetPayload<T>>> : CheckSelect<T, Prisma__SkillClient<Skill | null >, Prisma__SkillClient<SkillGetPayload<T> | null >>

    /**
     * Find the first Skill that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SkillFindFirstArgs} args - Arguments to find a Skill
     * @example
     * // Get one Skill
     * const skill = await prisma.skill.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends SkillFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, SkillFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Skill'> extends True ? CheckSelect<T, Prisma__SkillClient<Skill>, Prisma__SkillClient<SkillGetPayload<T>>> : CheckSelect<T, Prisma__SkillClient<Skill | null >, Prisma__SkillClient<SkillGetPayload<T> | null >>

    /**
     * Find zero or more Skills that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SkillFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Skills
     * const skills = await prisma.skill.findMany()
     * 
     * // Get first 10 Skills
     * const skills = await prisma.skill.findMany({ take: 10 })
     * 
     * // Only select the `skill_id`
     * const skillWithSkill_idOnly = await prisma.skill.findMany({ select: { skill_id: true } })
     * 
    **/
    findMany<T extends SkillFindManyArgs>(
      args?: SelectSubset<T, SkillFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Skill>>, PrismaPromise<Array<SkillGetPayload<T>>>>

    /**
     * Create a Skill.
     * @param {SkillCreateArgs} args - Arguments to create a Skill.
     * @example
     * // Create one Skill
     * const Skill = await prisma.skill.create({
     *   data: {
     *     // ... data to create a Skill
     *   }
     * })
     * 
    **/
    create<T extends SkillCreateArgs>(
      args: SelectSubset<T, SkillCreateArgs>
    ): CheckSelect<T, Prisma__SkillClient<Skill>, Prisma__SkillClient<SkillGetPayload<T>>>

    /**
     * Create many Skills.
     *     @param {SkillCreateManyArgs} args - Arguments to create many Skills.
     *     @example
     *     // Create many Skills
     *     const skill = await prisma.skill.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends SkillCreateManyArgs>(
      args?: SelectSubset<T, SkillCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Skill.
     * @param {SkillDeleteArgs} args - Arguments to delete one Skill.
     * @example
     * // Delete one Skill
     * const Skill = await prisma.skill.delete({
     *   where: {
     *     // ... filter to delete one Skill
     *   }
     * })
     * 
    **/
    delete<T extends SkillDeleteArgs>(
      args: SelectSubset<T, SkillDeleteArgs>
    ): CheckSelect<T, Prisma__SkillClient<Skill>, Prisma__SkillClient<SkillGetPayload<T>>>

    /**
     * Update one Skill.
     * @param {SkillUpdateArgs} args - Arguments to update one Skill.
     * @example
     * // Update one Skill
     * const skill = await prisma.skill.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends SkillUpdateArgs>(
      args: SelectSubset<T, SkillUpdateArgs>
    ): CheckSelect<T, Prisma__SkillClient<Skill>, Prisma__SkillClient<SkillGetPayload<T>>>

    /**
     * Delete zero or more Skills.
     * @param {SkillDeleteManyArgs} args - Arguments to filter Skills to delete.
     * @example
     * // Delete a few Skills
     * const { count } = await prisma.skill.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends SkillDeleteManyArgs>(
      args?: SelectSubset<T, SkillDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Skills.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SkillUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Skills
     * const skill = await prisma.skill.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends SkillUpdateManyArgs>(
      args: SelectSubset<T, SkillUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Skill.
     * @param {SkillUpsertArgs} args - Arguments to update or create a Skill.
     * @example
     * // Update or create a Skill
     * const skill = await prisma.skill.upsert({
     *   create: {
     *     // ... data to create a Skill
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Skill we want to update
     *   }
     * })
    **/
    upsert<T extends SkillUpsertArgs>(
      args: SelectSubset<T, SkillUpsertArgs>
    ): CheckSelect<T, Prisma__SkillClient<Skill>, Prisma__SkillClient<SkillGetPayload<T>>>

    /**
     * Count the number of Skills.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SkillCountArgs} args - Arguments to filter Skills to count.
     * @example
     * // Count the number of Skills
     * const count = await prisma.skill.count({
     *   where: {
     *     // ... the filter for the Skills we want to count
     *   }
     * })
    **/
    count<T extends SkillCountArgs>(
      args?: Subset<T, SkillCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SkillCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Skill.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SkillAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SkillAggregateArgs>(args: Subset<T, SkillAggregateArgs>): PrismaPromise<GetSkillAggregateType<T>>

    /**
     * Group by Skill.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SkillGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SkillGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SkillGroupByArgs['orderBy'] }
        : { orderBy?: SkillGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SkillGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSkillGroupByPayload<T> : Promise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for Skill.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__SkillClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    skill_items<T extends ItemFindManyArgs = {}>(args?: Subset<T, ItemFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Item>>, PrismaPromise<Array<ItemGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Skill findUnique
   */
  export type SkillFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the Skill
     * 
    **/
    select?: SkillSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SkillInclude | null
    /**
     * Throw an Error if a Skill can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Skill to fetch.
     * 
    **/
    where: SkillWhereUniqueInput
  }


  /**
   * Skill findFirst
   */
  export type SkillFindFirstArgs = {
    /**
     * Select specific fields to fetch from the Skill
     * 
    **/
    select?: SkillSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SkillInclude | null
    /**
     * Throw an Error if a Skill can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Skill to fetch.
     * 
    **/
    where?: SkillWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Skills to fetch.
     * 
    **/
    orderBy?: Enumerable<SkillOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Skills.
     * 
    **/
    cursor?: SkillWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Skills from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Skills.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Skills.
     * 
    **/
    distinct?: Enumerable<SkillScalarFieldEnum>
  }


  /**
   * Skill findMany
   */
  export type SkillFindManyArgs = {
    /**
     * Select specific fields to fetch from the Skill
     * 
    **/
    select?: SkillSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SkillInclude | null
    /**
     * Filter, which Skills to fetch.
     * 
    **/
    where?: SkillWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Skills to fetch.
     * 
    **/
    orderBy?: Enumerable<SkillOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Skills.
     * 
    **/
    cursor?: SkillWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Skills from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Skills.
     * 
    **/
    skip?: number
    distinct?: Enumerable<SkillScalarFieldEnum>
  }


  /**
   * Skill create
   */
  export type SkillCreateArgs = {
    /**
     * Select specific fields to fetch from the Skill
     * 
    **/
    select?: SkillSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SkillInclude | null
    /**
     * The data needed to create a Skill.
     * 
    **/
    data: XOR<SkillCreateInput, SkillUncheckedCreateInput>
  }


  /**
   * Skill createMany
   */
  export type SkillCreateManyArgs = {
    data: Enumerable<SkillCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Skill update
   */
  export type SkillUpdateArgs = {
    /**
     * Select specific fields to fetch from the Skill
     * 
    **/
    select?: SkillSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SkillInclude | null
    /**
     * The data needed to update a Skill.
     * 
    **/
    data: XOR<SkillUpdateInput, SkillUncheckedUpdateInput>
    /**
     * Choose, which Skill to update.
     * 
    **/
    where: SkillWhereUniqueInput
  }


  /**
   * Skill updateMany
   */
  export type SkillUpdateManyArgs = {
    data: XOR<SkillUpdateManyMutationInput, SkillUncheckedUpdateManyInput>
    where?: SkillWhereInput
  }


  /**
   * Skill upsert
   */
  export type SkillUpsertArgs = {
    /**
     * Select specific fields to fetch from the Skill
     * 
    **/
    select?: SkillSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SkillInclude | null
    /**
     * The filter to search for the Skill to update in case it exists.
     * 
    **/
    where: SkillWhereUniqueInput
    /**
     * In case the Skill found by the `where` argument doesn't exist, create a new Skill with this data.
     * 
    **/
    create: XOR<SkillCreateInput, SkillUncheckedCreateInput>
    /**
     * In case the Skill was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<SkillUpdateInput, SkillUncheckedUpdateInput>
  }


  /**
   * Skill delete
   */
  export type SkillDeleteArgs = {
    /**
     * Select specific fields to fetch from the Skill
     * 
    **/
    select?: SkillSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SkillInclude | null
    /**
     * Filter which Skill to delete.
     * 
    **/
    where: SkillWhereUniqueInput
  }


  /**
   * Skill deleteMany
   */
  export type SkillDeleteManyArgs = {
    where?: SkillWhereInput
  }


  /**
   * Skill without action
   */
  export type SkillArgs = {
    /**
     * Select specific fields to fetch from the Skill
     * 
    **/
    select?: SkillSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SkillInclude | null
  }



  /**
   * Enums
   */

  // Based on
  // https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

  export const UserScalarFieldEnum: {
    user_id: 'user_id',
    user_email: 'user_email',
    user_password: 'user_password',
    user_first_name: 'user_first_name',
    user_last_name: 'user_last_name'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const EvaluationScalarFieldEnum: {
    eval_id: 'eval_id',
    eval_date: 'eval_date',
    eval_user_id: 'eval_user_id'
  };

  export type EvaluationScalarFieldEnum = (typeof EvaluationScalarFieldEnum)[keyof typeof EvaluationScalarFieldEnum]


  export const NoterScalarFieldEnum: {
    noter_eval_id: 'noter_eval_id',
    noter_item_id: 'noter_item_id',
    noter_value: 'noter_value'
  };

  export type NoterScalarFieldEnum = (typeof NoterScalarFieldEnum)[keyof typeof NoterScalarFieldEnum]


  export const ItemScalarFieldEnum: {
    item_id: 'item_id',
    item_title: 'item_title',
    item_skill_id: 'item_skill_id'
  };

  export type ItemScalarFieldEnum = (typeof ItemScalarFieldEnum)[keyof typeof ItemScalarFieldEnum]


  export const SkillScalarFieldEnum: {
    skill_id: 'skill_id',
    skill_title: 'skill_title'
  };

  export type SkillScalarFieldEnum = (typeof SkillScalarFieldEnum)[keyof typeof SkillScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: Enumerable<UserWhereInput>
    OR?: Enumerable<UserWhereInput>
    NOT?: Enumerable<UserWhereInput>
    user_id?: IntFilter | number
    user_email?: StringFilter | string
    user_password?: StringFilter | string
    user_first_name?: StringFilter | string
    user_last_name?: StringFilter | string
    user_list_evals?: EvaluationListRelationFilter
  }

  export type UserOrderByInput = {
    user_id?: SortOrder
    user_email?: SortOrder
    user_password?: SortOrder
    user_first_name?: SortOrder
    user_last_name?: SortOrder
  }

  export type UserWhereUniqueInput = {
    user_id?: number
    user_email?: string
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: Enumerable<UserScalarWhereWithAggregatesInput>
    OR?: Enumerable<UserScalarWhereWithAggregatesInput>
    NOT?: Enumerable<UserScalarWhereWithAggregatesInput>
    user_id?: IntWithAggregatesFilter | number
    user_email?: StringWithAggregatesFilter | string
    user_password?: StringWithAggregatesFilter | string
    user_first_name?: StringWithAggregatesFilter | string
    user_last_name?: StringWithAggregatesFilter | string
  }

  export type EvaluationWhereInput = {
    AND?: Enumerable<EvaluationWhereInput>
    OR?: Enumerable<EvaluationWhereInput>
    NOT?: Enumerable<EvaluationWhereInput>
    eval_id?: IntFilter | number
    eval_date?: DateTimeFilter | Date | string
    eval_user?: XOR<UserRelationFilter, UserWhereInput>
    eval_user_id?: IntFilter | number
    eval_list_notes?: NoterListRelationFilter
  }

  export type EvaluationOrderByInput = {
    eval_id?: SortOrder
    eval_date?: SortOrder
    eval_user_id?: SortOrder
  }

  export type EvaluationWhereUniqueInput = {
    eval_id?: number
  }

  export type EvaluationScalarWhereWithAggregatesInput = {
    AND?: Enumerable<EvaluationScalarWhereWithAggregatesInput>
    OR?: Enumerable<EvaluationScalarWhereWithAggregatesInput>
    NOT?: Enumerable<EvaluationScalarWhereWithAggregatesInput>
    eval_id?: IntWithAggregatesFilter | number
    eval_date?: DateTimeWithAggregatesFilter | Date | string
    eval_user_id?: IntWithAggregatesFilter | number
  }

  export type NoterWhereInput = {
    AND?: Enumerable<NoterWhereInput>
    OR?: Enumerable<NoterWhereInput>
    NOT?: Enumerable<NoterWhereInput>
    noter_eval_id?: IntFilter | number
    noter_eval?: XOR<EvaluationRelationFilter, EvaluationWhereInput>
    noter_item_id?: IntFilter | number
    noter_item?: XOR<ItemRelationFilter, ItemWhereInput>
    noter_value?: IntFilter | number
  }

  export type NoterOrderByInput = {
    noter_eval_id?: SortOrder
    noter_item_id?: SortOrder
    noter_value?: SortOrder
  }

  export type NoterWhereUniqueInput = {
    noter_eval_id_noter_item_id?: NoterNoter_eval_idNoter_item_idCompoundUniqueInput
  }

  export type NoterScalarWhereWithAggregatesInput = {
    AND?: Enumerable<NoterScalarWhereWithAggregatesInput>
    OR?: Enumerable<NoterScalarWhereWithAggregatesInput>
    NOT?: Enumerable<NoterScalarWhereWithAggregatesInput>
    noter_eval_id?: IntWithAggregatesFilter | number
    noter_item_id?: IntWithAggregatesFilter | number
    noter_value?: IntWithAggregatesFilter | number
  }

  export type ItemWhereInput = {
    AND?: Enumerable<ItemWhereInput>
    OR?: Enumerable<ItemWhereInput>
    NOT?: Enumerable<ItemWhereInput>
    item_id?: IntFilter | number
    item_title?: StringFilter | string
    item_skill_id?: IntFilter | number
    item_skill?: XOR<SkillRelationFilter, SkillWhereInput>
    item_list_notes?: NoterListRelationFilter
  }

  export type ItemOrderByInput = {
    item_id?: SortOrder
    item_title?: SortOrder
    item_skill_id?: SortOrder
  }

  export type ItemWhereUniqueInput = {
    item_id?: number
  }

  export type ItemScalarWhereWithAggregatesInput = {
    AND?: Enumerable<ItemScalarWhereWithAggregatesInput>
    OR?: Enumerable<ItemScalarWhereWithAggregatesInput>
    NOT?: Enumerable<ItemScalarWhereWithAggregatesInput>
    item_id?: IntWithAggregatesFilter | number
    item_title?: StringWithAggregatesFilter | string
    item_skill_id?: IntWithAggregatesFilter | number
  }

  export type SkillWhereInput = {
    AND?: Enumerable<SkillWhereInput>
    OR?: Enumerable<SkillWhereInput>
    NOT?: Enumerable<SkillWhereInput>
    skill_id?: IntFilter | number
    skill_title?: StringFilter | string
    skill_items?: ItemListRelationFilter
  }

  export type SkillOrderByInput = {
    skill_id?: SortOrder
    skill_title?: SortOrder
  }

  export type SkillWhereUniqueInput = {
    skill_id?: number
  }

  export type SkillScalarWhereWithAggregatesInput = {
    AND?: Enumerable<SkillScalarWhereWithAggregatesInput>
    OR?: Enumerable<SkillScalarWhereWithAggregatesInput>
    NOT?: Enumerable<SkillScalarWhereWithAggregatesInput>
    skill_id?: IntWithAggregatesFilter | number
    skill_title?: StringWithAggregatesFilter | string
  }

  export type UserCreateInput = {
    user_email: string
    user_password: string
    user_first_name: string
    user_last_name: string
    user_list_evals?: EvaluationCreateNestedManyWithoutEval_userInput
  }

  export type UserUncheckedCreateInput = {
    user_id?: number
    user_email: string
    user_password: string
    user_first_name: string
    user_last_name: string
    user_list_evals?: EvaluationUncheckedCreateNestedManyWithoutEval_userInput
  }

  export type UserUpdateInput = {
    user_email?: StringFieldUpdateOperationsInput | string
    user_password?: StringFieldUpdateOperationsInput | string
    user_first_name?: StringFieldUpdateOperationsInput | string
    user_last_name?: StringFieldUpdateOperationsInput | string
    user_list_evals?: EvaluationUpdateManyWithoutEval_userInput
  }

  export type UserUncheckedUpdateInput = {
    user_id?: IntFieldUpdateOperationsInput | number
    user_email?: StringFieldUpdateOperationsInput | string
    user_password?: StringFieldUpdateOperationsInput | string
    user_first_name?: StringFieldUpdateOperationsInput | string
    user_last_name?: StringFieldUpdateOperationsInput | string
    user_list_evals?: EvaluationUncheckedUpdateManyWithoutEval_userInput
  }

  export type UserCreateManyInput = {
    user_id?: number
    user_email: string
    user_password: string
    user_first_name: string
    user_last_name: string
  }

  export type UserUpdateManyMutationInput = {
    user_email?: StringFieldUpdateOperationsInput | string
    user_password?: StringFieldUpdateOperationsInput | string
    user_first_name?: StringFieldUpdateOperationsInput | string
    user_last_name?: StringFieldUpdateOperationsInput | string
  }

  export type UserUncheckedUpdateManyInput = {
    user_id?: IntFieldUpdateOperationsInput | number
    user_email?: StringFieldUpdateOperationsInput | string
    user_password?: StringFieldUpdateOperationsInput | string
    user_first_name?: StringFieldUpdateOperationsInput | string
    user_last_name?: StringFieldUpdateOperationsInput | string
  }

  export type EvaluationCreateInput = {
    eval_date?: Date | string
    eval_user: UserCreateNestedOneWithoutUser_list_evalsInput
    eval_list_notes?: NoterCreateNestedManyWithoutNoter_evalInput
  }

  export type EvaluationUncheckedCreateInput = {
    eval_id?: number
    eval_date?: Date | string
    eval_user_id: number
    eval_list_notes?: NoterUncheckedCreateNestedManyWithoutNoter_evalInput
  }

  export type EvaluationUpdateInput = {
    eval_date?: DateTimeFieldUpdateOperationsInput | Date | string
    eval_user?: UserUpdateOneRequiredWithoutUser_list_evalsInput
    eval_list_notes?: NoterUpdateManyWithoutNoter_evalInput
  }

  export type EvaluationUncheckedUpdateInput = {
    eval_id?: IntFieldUpdateOperationsInput | number
    eval_date?: DateTimeFieldUpdateOperationsInput | Date | string
    eval_user_id?: IntFieldUpdateOperationsInput | number
    eval_list_notes?: NoterUncheckedUpdateManyWithoutNoter_evalInput
  }

  export type EvaluationCreateManyInput = {
    eval_id?: number
    eval_date?: Date | string
    eval_user_id: number
  }

  export type EvaluationUpdateManyMutationInput = {
    eval_date?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EvaluationUncheckedUpdateManyInput = {
    eval_id?: IntFieldUpdateOperationsInput | number
    eval_date?: DateTimeFieldUpdateOperationsInput | Date | string
    eval_user_id?: IntFieldUpdateOperationsInput | number
  }

  export type NoterCreateInput = {
    noter_value: number
    noter_eval: EvaluationCreateNestedOneWithoutEval_list_notesInput
    noter_item: ItemCreateNestedOneWithoutItem_list_notesInput
  }

  export type NoterUncheckedCreateInput = {
    noter_eval_id: number
    noter_item_id: number
    noter_value: number
  }

  export type NoterUpdateInput = {
    noter_value?: IntFieldUpdateOperationsInput | number
    noter_eval?: EvaluationUpdateOneRequiredWithoutEval_list_notesInput
    noter_item?: ItemUpdateOneRequiredWithoutItem_list_notesInput
  }

  export type NoterUncheckedUpdateInput = {
    noter_eval_id?: IntFieldUpdateOperationsInput | number
    noter_item_id?: IntFieldUpdateOperationsInput | number
    noter_value?: IntFieldUpdateOperationsInput | number
  }

  export type NoterCreateManyInput = {
    noter_eval_id: number
    noter_item_id: number
    noter_value: number
  }

  export type NoterUpdateManyMutationInput = {
    noter_value?: IntFieldUpdateOperationsInput | number
  }

  export type NoterUncheckedUpdateManyInput = {
    noter_eval_id?: IntFieldUpdateOperationsInput | number
    noter_item_id?: IntFieldUpdateOperationsInput | number
    noter_value?: IntFieldUpdateOperationsInput | number
  }

  export type ItemCreateInput = {
    item_title: string
    item_skill: SkillCreateNestedOneWithoutSkill_itemsInput
    item_list_notes?: NoterCreateNestedManyWithoutNoter_itemInput
  }

  export type ItemUncheckedCreateInput = {
    item_id?: number
    item_title: string
    item_skill_id: number
    item_list_notes?: NoterUncheckedCreateNestedManyWithoutNoter_itemInput
  }

  export type ItemUpdateInput = {
    item_title?: StringFieldUpdateOperationsInput | string
    item_skill?: SkillUpdateOneRequiredWithoutSkill_itemsInput
    item_list_notes?: NoterUpdateManyWithoutNoter_itemInput
  }

  export type ItemUncheckedUpdateInput = {
    item_id?: IntFieldUpdateOperationsInput | number
    item_title?: StringFieldUpdateOperationsInput | string
    item_skill_id?: IntFieldUpdateOperationsInput | number
    item_list_notes?: NoterUncheckedUpdateManyWithoutNoter_itemInput
  }

  export type ItemCreateManyInput = {
    item_id?: number
    item_title: string
    item_skill_id: number
  }

  export type ItemUpdateManyMutationInput = {
    item_title?: StringFieldUpdateOperationsInput | string
  }

  export type ItemUncheckedUpdateManyInput = {
    item_id?: IntFieldUpdateOperationsInput | number
    item_title?: StringFieldUpdateOperationsInput | string
    item_skill_id?: IntFieldUpdateOperationsInput | number
  }

  export type SkillCreateInput = {
    skill_title: string
    skill_items?: ItemCreateNestedManyWithoutItem_skillInput
  }

  export type SkillUncheckedCreateInput = {
    skill_id?: number
    skill_title: string
    skill_items?: ItemUncheckedCreateNestedManyWithoutItem_skillInput
  }

  export type SkillUpdateInput = {
    skill_title?: StringFieldUpdateOperationsInput | string
    skill_items?: ItemUpdateManyWithoutItem_skillInput
  }

  export type SkillUncheckedUpdateInput = {
    skill_id?: IntFieldUpdateOperationsInput | number
    skill_title?: StringFieldUpdateOperationsInput | string
    skill_items?: ItemUncheckedUpdateManyWithoutItem_skillInput
  }

  export type SkillCreateManyInput = {
    skill_id?: number
    skill_title: string
  }

  export type SkillUpdateManyMutationInput = {
    skill_title?: StringFieldUpdateOperationsInput | string
  }

  export type SkillUncheckedUpdateManyInput = {
    skill_id?: IntFieldUpdateOperationsInput | number
    skill_title?: StringFieldUpdateOperationsInput | string
  }

  export type IntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type StringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type EvaluationListRelationFilter = {
    every?: EvaluationWhereInput
    some?: EvaluationWhereInput
    none?: EvaluationWhereInput
  }

  export type IntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    count?: NestedIntFilter
    _avg?: NestedFloatFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    sum?: NestedIntFilter
    _min?: NestedIntFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    min?: NestedIntFilter
    _max?: NestedIntFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    max?: NestedIntFilter
  }

  export type StringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    count?: NestedIntFilter
    _min?: NestedStringFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    min?: NestedStringFilter
    _max?: NestedStringFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    max?: NestedStringFilter
  }

  export type DateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type UserRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type NoterListRelationFilter = {
    every?: NoterWhereInput
    some?: NoterWhereInput
    none?: NoterWhereInput
  }

  export type DateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    max?: NestedDateTimeFilter
  }

  export type EvaluationRelationFilter = {
    is?: EvaluationWhereInput
    isNot?: EvaluationWhereInput
  }

  export type ItemRelationFilter = {
    is?: ItemWhereInput
    isNot?: ItemWhereInput
  }

  export type NoterNoter_eval_idNoter_item_idCompoundUniqueInput = {
    noter_eval_id: number
    noter_item_id: number
  }

  export type SkillRelationFilter = {
    is?: SkillWhereInput
    isNot?: SkillWhereInput
  }

  export type ItemListRelationFilter = {
    every?: ItemWhereInput
    some?: ItemWhereInput
    none?: ItemWhereInput
  }

  export type EvaluationCreateNestedManyWithoutEval_userInput = {
    create?: XOR<Enumerable<EvaluationCreateWithoutEval_userInput>, Enumerable<EvaluationUncheckedCreateWithoutEval_userInput>>
    connectOrCreate?: Enumerable<EvaluationCreateOrConnectWithoutEval_userInput>
    createMany?: EvaluationCreateManyEval_userInputEnvelope
    connect?: Enumerable<EvaluationWhereUniqueInput>
  }

  export type EvaluationUncheckedCreateNestedManyWithoutEval_userInput = {
    create?: XOR<Enumerable<EvaluationCreateWithoutEval_userInput>, Enumerable<EvaluationUncheckedCreateWithoutEval_userInput>>
    connectOrCreate?: Enumerable<EvaluationCreateOrConnectWithoutEval_userInput>
    createMany?: EvaluationCreateManyEval_userInputEnvelope
    connect?: Enumerable<EvaluationWhereUniqueInput>
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type EvaluationUpdateManyWithoutEval_userInput = {
    create?: XOR<Enumerable<EvaluationCreateWithoutEval_userInput>, Enumerable<EvaluationUncheckedCreateWithoutEval_userInput>>
    connectOrCreate?: Enumerable<EvaluationCreateOrConnectWithoutEval_userInput>
    upsert?: Enumerable<EvaluationUpsertWithWhereUniqueWithoutEval_userInput>
    createMany?: EvaluationCreateManyEval_userInputEnvelope
    connect?: Enumerable<EvaluationWhereUniqueInput>
    set?: Enumerable<EvaluationWhereUniqueInput>
    disconnect?: Enumerable<EvaluationWhereUniqueInput>
    delete?: Enumerable<EvaluationWhereUniqueInput>
    update?: Enumerable<EvaluationUpdateWithWhereUniqueWithoutEval_userInput>
    updateMany?: Enumerable<EvaluationUpdateManyWithWhereWithoutEval_userInput>
    deleteMany?: Enumerable<EvaluationScalarWhereInput>
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type EvaluationUncheckedUpdateManyWithoutEval_userInput = {
    create?: XOR<Enumerable<EvaluationCreateWithoutEval_userInput>, Enumerable<EvaluationUncheckedCreateWithoutEval_userInput>>
    connectOrCreate?: Enumerable<EvaluationCreateOrConnectWithoutEval_userInput>
    upsert?: Enumerable<EvaluationUpsertWithWhereUniqueWithoutEval_userInput>
    createMany?: EvaluationCreateManyEval_userInputEnvelope
    connect?: Enumerable<EvaluationWhereUniqueInput>
    set?: Enumerable<EvaluationWhereUniqueInput>
    disconnect?: Enumerable<EvaluationWhereUniqueInput>
    delete?: Enumerable<EvaluationWhereUniqueInput>
    update?: Enumerable<EvaluationUpdateWithWhereUniqueWithoutEval_userInput>
    updateMany?: Enumerable<EvaluationUpdateManyWithWhereWithoutEval_userInput>
    deleteMany?: Enumerable<EvaluationScalarWhereInput>
  }

  export type UserCreateNestedOneWithoutUser_list_evalsInput = {
    create?: XOR<UserCreateWithoutUser_list_evalsInput, UserUncheckedCreateWithoutUser_list_evalsInput>
    connectOrCreate?: UserCreateOrConnectWithoutUser_list_evalsInput
    connect?: UserWhereUniqueInput
  }

  export type NoterCreateNestedManyWithoutNoter_evalInput = {
    create?: XOR<Enumerable<NoterCreateWithoutNoter_evalInput>, Enumerable<NoterUncheckedCreateWithoutNoter_evalInput>>
    connectOrCreate?: Enumerable<NoterCreateOrConnectWithoutNoter_evalInput>
    createMany?: NoterCreateManyNoter_evalInputEnvelope
    connect?: Enumerable<NoterWhereUniqueInput>
  }

  export type NoterUncheckedCreateNestedManyWithoutNoter_evalInput = {
    create?: XOR<Enumerable<NoterCreateWithoutNoter_evalInput>, Enumerable<NoterUncheckedCreateWithoutNoter_evalInput>>
    connectOrCreate?: Enumerable<NoterCreateOrConnectWithoutNoter_evalInput>
    createMany?: NoterCreateManyNoter_evalInputEnvelope
    connect?: Enumerable<NoterWhereUniqueInput>
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type UserUpdateOneRequiredWithoutUser_list_evalsInput = {
    create?: XOR<UserCreateWithoutUser_list_evalsInput, UserUncheckedCreateWithoutUser_list_evalsInput>
    connectOrCreate?: UserCreateOrConnectWithoutUser_list_evalsInput
    upsert?: UserUpsertWithoutUser_list_evalsInput
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutUser_list_evalsInput, UserUncheckedUpdateWithoutUser_list_evalsInput>
  }

  export type NoterUpdateManyWithoutNoter_evalInput = {
    create?: XOR<Enumerable<NoterCreateWithoutNoter_evalInput>, Enumerable<NoterUncheckedCreateWithoutNoter_evalInput>>
    connectOrCreate?: Enumerable<NoterCreateOrConnectWithoutNoter_evalInput>
    upsert?: Enumerable<NoterUpsertWithWhereUniqueWithoutNoter_evalInput>
    createMany?: NoterCreateManyNoter_evalInputEnvelope
    connect?: Enumerable<NoterWhereUniqueInput>
    set?: Enumerable<NoterWhereUniqueInput>
    disconnect?: Enumerable<NoterWhereUniqueInput>
    delete?: Enumerable<NoterWhereUniqueInput>
    update?: Enumerable<NoterUpdateWithWhereUniqueWithoutNoter_evalInput>
    updateMany?: Enumerable<NoterUpdateManyWithWhereWithoutNoter_evalInput>
    deleteMany?: Enumerable<NoterScalarWhereInput>
  }

  export type NoterUncheckedUpdateManyWithoutNoter_evalInput = {
    create?: XOR<Enumerable<NoterCreateWithoutNoter_evalInput>, Enumerable<NoterUncheckedCreateWithoutNoter_evalInput>>
    connectOrCreate?: Enumerable<NoterCreateOrConnectWithoutNoter_evalInput>
    upsert?: Enumerable<NoterUpsertWithWhereUniqueWithoutNoter_evalInput>
    createMany?: NoterCreateManyNoter_evalInputEnvelope
    connect?: Enumerable<NoterWhereUniqueInput>
    set?: Enumerable<NoterWhereUniqueInput>
    disconnect?: Enumerable<NoterWhereUniqueInput>
    delete?: Enumerable<NoterWhereUniqueInput>
    update?: Enumerable<NoterUpdateWithWhereUniqueWithoutNoter_evalInput>
    updateMany?: Enumerable<NoterUpdateManyWithWhereWithoutNoter_evalInput>
    deleteMany?: Enumerable<NoterScalarWhereInput>
  }

  export type EvaluationCreateNestedOneWithoutEval_list_notesInput = {
    create?: XOR<EvaluationCreateWithoutEval_list_notesInput, EvaluationUncheckedCreateWithoutEval_list_notesInput>
    connectOrCreate?: EvaluationCreateOrConnectWithoutEval_list_notesInput
    connect?: EvaluationWhereUniqueInput
  }

  export type ItemCreateNestedOneWithoutItem_list_notesInput = {
    create?: XOR<ItemCreateWithoutItem_list_notesInput, ItemUncheckedCreateWithoutItem_list_notesInput>
    connectOrCreate?: ItemCreateOrConnectWithoutItem_list_notesInput
    connect?: ItemWhereUniqueInput
  }

  export type EvaluationUpdateOneRequiredWithoutEval_list_notesInput = {
    create?: XOR<EvaluationCreateWithoutEval_list_notesInput, EvaluationUncheckedCreateWithoutEval_list_notesInput>
    connectOrCreate?: EvaluationCreateOrConnectWithoutEval_list_notesInput
    upsert?: EvaluationUpsertWithoutEval_list_notesInput
    connect?: EvaluationWhereUniqueInput
    update?: XOR<EvaluationUpdateWithoutEval_list_notesInput, EvaluationUncheckedUpdateWithoutEval_list_notesInput>
  }

  export type ItemUpdateOneRequiredWithoutItem_list_notesInput = {
    create?: XOR<ItemCreateWithoutItem_list_notesInput, ItemUncheckedCreateWithoutItem_list_notesInput>
    connectOrCreate?: ItemCreateOrConnectWithoutItem_list_notesInput
    upsert?: ItemUpsertWithoutItem_list_notesInput
    connect?: ItemWhereUniqueInput
    update?: XOR<ItemUpdateWithoutItem_list_notesInput, ItemUncheckedUpdateWithoutItem_list_notesInput>
  }

  export type SkillCreateNestedOneWithoutSkill_itemsInput = {
    create?: XOR<SkillCreateWithoutSkill_itemsInput, SkillUncheckedCreateWithoutSkill_itemsInput>
    connectOrCreate?: SkillCreateOrConnectWithoutSkill_itemsInput
    connect?: SkillWhereUniqueInput
  }

  export type NoterCreateNestedManyWithoutNoter_itemInput = {
    create?: XOR<Enumerable<NoterCreateWithoutNoter_itemInput>, Enumerable<NoterUncheckedCreateWithoutNoter_itemInput>>
    connectOrCreate?: Enumerable<NoterCreateOrConnectWithoutNoter_itemInput>
    createMany?: NoterCreateManyNoter_itemInputEnvelope
    connect?: Enumerable<NoterWhereUniqueInput>
  }

  export type NoterUncheckedCreateNestedManyWithoutNoter_itemInput = {
    create?: XOR<Enumerable<NoterCreateWithoutNoter_itemInput>, Enumerable<NoterUncheckedCreateWithoutNoter_itemInput>>
    connectOrCreate?: Enumerable<NoterCreateOrConnectWithoutNoter_itemInput>
    createMany?: NoterCreateManyNoter_itemInputEnvelope
    connect?: Enumerable<NoterWhereUniqueInput>
  }

  export type SkillUpdateOneRequiredWithoutSkill_itemsInput = {
    create?: XOR<SkillCreateWithoutSkill_itemsInput, SkillUncheckedCreateWithoutSkill_itemsInput>
    connectOrCreate?: SkillCreateOrConnectWithoutSkill_itemsInput
    upsert?: SkillUpsertWithoutSkill_itemsInput
    connect?: SkillWhereUniqueInput
    update?: XOR<SkillUpdateWithoutSkill_itemsInput, SkillUncheckedUpdateWithoutSkill_itemsInput>
  }

  export type NoterUpdateManyWithoutNoter_itemInput = {
    create?: XOR<Enumerable<NoterCreateWithoutNoter_itemInput>, Enumerable<NoterUncheckedCreateWithoutNoter_itemInput>>
    connectOrCreate?: Enumerable<NoterCreateOrConnectWithoutNoter_itemInput>
    upsert?: Enumerable<NoterUpsertWithWhereUniqueWithoutNoter_itemInput>
    createMany?: NoterCreateManyNoter_itemInputEnvelope
    connect?: Enumerable<NoterWhereUniqueInput>
    set?: Enumerable<NoterWhereUniqueInput>
    disconnect?: Enumerable<NoterWhereUniqueInput>
    delete?: Enumerable<NoterWhereUniqueInput>
    update?: Enumerable<NoterUpdateWithWhereUniqueWithoutNoter_itemInput>
    updateMany?: Enumerable<NoterUpdateManyWithWhereWithoutNoter_itemInput>
    deleteMany?: Enumerable<NoterScalarWhereInput>
  }

  export type NoterUncheckedUpdateManyWithoutNoter_itemInput = {
    create?: XOR<Enumerable<NoterCreateWithoutNoter_itemInput>, Enumerable<NoterUncheckedCreateWithoutNoter_itemInput>>
    connectOrCreate?: Enumerable<NoterCreateOrConnectWithoutNoter_itemInput>
    upsert?: Enumerable<NoterUpsertWithWhereUniqueWithoutNoter_itemInput>
    createMany?: NoterCreateManyNoter_itemInputEnvelope
    connect?: Enumerable<NoterWhereUniqueInput>
    set?: Enumerable<NoterWhereUniqueInput>
    disconnect?: Enumerable<NoterWhereUniqueInput>
    delete?: Enumerable<NoterWhereUniqueInput>
    update?: Enumerable<NoterUpdateWithWhereUniqueWithoutNoter_itemInput>
    updateMany?: Enumerable<NoterUpdateManyWithWhereWithoutNoter_itemInput>
    deleteMany?: Enumerable<NoterScalarWhereInput>
  }

  export type ItemCreateNestedManyWithoutItem_skillInput = {
    create?: XOR<Enumerable<ItemCreateWithoutItem_skillInput>, Enumerable<ItemUncheckedCreateWithoutItem_skillInput>>
    connectOrCreate?: Enumerable<ItemCreateOrConnectWithoutItem_skillInput>
    createMany?: ItemCreateManyItem_skillInputEnvelope
    connect?: Enumerable<ItemWhereUniqueInput>
  }

  export type ItemUncheckedCreateNestedManyWithoutItem_skillInput = {
    create?: XOR<Enumerable<ItemCreateWithoutItem_skillInput>, Enumerable<ItemUncheckedCreateWithoutItem_skillInput>>
    connectOrCreate?: Enumerable<ItemCreateOrConnectWithoutItem_skillInput>
    createMany?: ItemCreateManyItem_skillInputEnvelope
    connect?: Enumerable<ItemWhereUniqueInput>
  }

  export type ItemUpdateManyWithoutItem_skillInput = {
    create?: XOR<Enumerable<ItemCreateWithoutItem_skillInput>, Enumerable<ItemUncheckedCreateWithoutItem_skillInput>>
    connectOrCreate?: Enumerable<ItemCreateOrConnectWithoutItem_skillInput>
    upsert?: Enumerable<ItemUpsertWithWhereUniqueWithoutItem_skillInput>
    createMany?: ItemCreateManyItem_skillInputEnvelope
    connect?: Enumerable<ItemWhereUniqueInput>
    set?: Enumerable<ItemWhereUniqueInput>
    disconnect?: Enumerable<ItemWhereUniqueInput>
    delete?: Enumerable<ItemWhereUniqueInput>
    update?: Enumerable<ItemUpdateWithWhereUniqueWithoutItem_skillInput>
    updateMany?: Enumerable<ItemUpdateManyWithWhereWithoutItem_skillInput>
    deleteMany?: Enumerable<ItemScalarWhereInput>
  }

  export type ItemUncheckedUpdateManyWithoutItem_skillInput = {
    create?: XOR<Enumerable<ItemCreateWithoutItem_skillInput>, Enumerable<ItemUncheckedCreateWithoutItem_skillInput>>
    connectOrCreate?: Enumerable<ItemCreateOrConnectWithoutItem_skillInput>
    upsert?: Enumerable<ItemUpsertWithWhereUniqueWithoutItem_skillInput>
    createMany?: ItemCreateManyItem_skillInputEnvelope
    connect?: Enumerable<ItemWhereUniqueInput>
    set?: Enumerable<ItemWhereUniqueInput>
    disconnect?: Enumerable<ItemWhereUniqueInput>
    delete?: Enumerable<ItemWhereUniqueInput>
    update?: Enumerable<ItemUpdateWithWhereUniqueWithoutItem_skillInput>
    updateMany?: Enumerable<ItemUpdateManyWithWhereWithoutItem_skillInput>
    deleteMany?: Enumerable<ItemScalarWhereInput>
  }

  export type NestedIntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type NestedStringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type NestedIntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    count?: NestedIntFilter
    _avg?: NestedFloatFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    sum?: NestedIntFilter
    _min?: NestedIntFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    min?: NestedIntFilter
    _max?: NestedIntFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    max?: NestedIntFilter
  }

  export type NestedFloatFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatFilter | number
  }

  export type NestedStringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    count?: NestedIntFilter
    _min?: NestedStringFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    min?: NestedStringFilter
    _max?: NestedStringFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    max?: NestedStringFilter
  }

  export type NestedDateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type NestedDateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    max?: NestedDateTimeFilter
  }

  export type EvaluationCreateWithoutEval_userInput = {
    eval_date?: Date | string
    eval_list_notes?: NoterCreateNestedManyWithoutNoter_evalInput
  }

  export type EvaluationUncheckedCreateWithoutEval_userInput = {
    eval_id?: number
    eval_date?: Date | string
    eval_list_notes?: NoterUncheckedCreateNestedManyWithoutNoter_evalInput
  }

  export type EvaluationCreateOrConnectWithoutEval_userInput = {
    where: EvaluationWhereUniqueInput
    create: XOR<EvaluationCreateWithoutEval_userInput, EvaluationUncheckedCreateWithoutEval_userInput>
  }

  export type EvaluationCreateManyEval_userInputEnvelope = {
    data: Enumerable<EvaluationCreateManyEval_userInput>
    skipDuplicates?: boolean
  }

  export type EvaluationUpsertWithWhereUniqueWithoutEval_userInput = {
    where: EvaluationWhereUniqueInput
    update: XOR<EvaluationUpdateWithoutEval_userInput, EvaluationUncheckedUpdateWithoutEval_userInput>
    create: XOR<EvaluationCreateWithoutEval_userInput, EvaluationUncheckedCreateWithoutEval_userInput>
  }

  export type EvaluationUpdateWithWhereUniqueWithoutEval_userInput = {
    where: EvaluationWhereUniqueInput
    data: XOR<EvaluationUpdateWithoutEval_userInput, EvaluationUncheckedUpdateWithoutEval_userInput>
  }

  export type EvaluationUpdateManyWithWhereWithoutEval_userInput = {
    where: EvaluationScalarWhereInput
    data: XOR<EvaluationUpdateManyMutationInput, EvaluationUncheckedUpdateManyWithoutUser_list_evalsInput>
  }

  export type EvaluationScalarWhereInput = {
    AND?: Enumerable<EvaluationScalarWhereInput>
    OR?: Enumerable<EvaluationScalarWhereInput>
    NOT?: Enumerable<EvaluationScalarWhereInput>
    eval_id?: IntFilter | number
    eval_date?: DateTimeFilter | Date | string
    eval_user_id?: IntFilter | number
  }

  export type UserCreateWithoutUser_list_evalsInput = {
    user_email: string
    user_password: string
    user_first_name: string
    user_last_name: string
  }

  export type UserUncheckedCreateWithoutUser_list_evalsInput = {
    user_id?: number
    user_email: string
    user_password: string
    user_first_name: string
    user_last_name: string
  }

  export type UserCreateOrConnectWithoutUser_list_evalsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutUser_list_evalsInput, UserUncheckedCreateWithoutUser_list_evalsInput>
  }

  export type NoterCreateWithoutNoter_evalInput = {
    noter_value: number
    noter_item: ItemCreateNestedOneWithoutItem_list_notesInput
  }

  export type NoterUncheckedCreateWithoutNoter_evalInput = {
    noter_item_id: number
    noter_value: number
  }

  export type NoterCreateOrConnectWithoutNoter_evalInput = {
    where: NoterWhereUniqueInput
    create: XOR<NoterCreateWithoutNoter_evalInput, NoterUncheckedCreateWithoutNoter_evalInput>
  }

  export type NoterCreateManyNoter_evalInputEnvelope = {
    data: Enumerable<NoterCreateManyNoter_evalInput>
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutUser_list_evalsInput = {
    update: XOR<UserUpdateWithoutUser_list_evalsInput, UserUncheckedUpdateWithoutUser_list_evalsInput>
    create: XOR<UserCreateWithoutUser_list_evalsInput, UserUncheckedCreateWithoutUser_list_evalsInput>
  }

  export type UserUpdateWithoutUser_list_evalsInput = {
    user_email?: StringFieldUpdateOperationsInput | string
    user_password?: StringFieldUpdateOperationsInput | string
    user_first_name?: StringFieldUpdateOperationsInput | string
    user_last_name?: StringFieldUpdateOperationsInput | string
  }

  export type UserUncheckedUpdateWithoutUser_list_evalsInput = {
    user_id?: IntFieldUpdateOperationsInput | number
    user_email?: StringFieldUpdateOperationsInput | string
    user_password?: StringFieldUpdateOperationsInput | string
    user_first_name?: StringFieldUpdateOperationsInput | string
    user_last_name?: StringFieldUpdateOperationsInput | string
  }

  export type NoterUpsertWithWhereUniqueWithoutNoter_evalInput = {
    where: NoterWhereUniqueInput
    update: XOR<NoterUpdateWithoutNoter_evalInput, NoterUncheckedUpdateWithoutNoter_evalInput>
    create: XOR<NoterCreateWithoutNoter_evalInput, NoterUncheckedCreateWithoutNoter_evalInput>
  }

  export type NoterUpdateWithWhereUniqueWithoutNoter_evalInput = {
    where: NoterWhereUniqueInput
    data: XOR<NoterUpdateWithoutNoter_evalInput, NoterUncheckedUpdateWithoutNoter_evalInput>
  }

  export type NoterUpdateManyWithWhereWithoutNoter_evalInput = {
    where: NoterScalarWhereInput
    data: XOR<NoterUpdateManyMutationInput, NoterUncheckedUpdateManyWithoutEval_list_notesInput>
  }

  export type NoterScalarWhereInput = {
    AND?: Enumerable<NoterScalarWhereInput>
    OR?: Enumerable<NoterScalarWhereInput>
    NOT?: Enumerable<NoterScalarWhereInput>
    noter_eval_id?: IntFilter | number
    noter_item_id?: IntFilter | number
    noter_value?: IntFilter | number
  }

  export type EvaluationCreateWithoutEval_list_notesInput = {
    eval_date?: Date | string
    eval_user: UserCreateNestedOneWithoutUser_list_evalsInput
  }

  export type EvaluationUncheckedCreateWithoutEval_list_notesInput = {
    eval_id?: number
    eval_date?: Date | string
    eval_user_id: number
  }

  export type EvaluationCreateOrConnectWithoutEval_list_notesInput = {
    where: EvaluationWhereUniqueInput
    create: XOR<EvaluationCreateWithoutEval_list_notesInput, EvaluationUncheckedCreateWithoutEval_list_notesInput>
  }

  export type ItemCreateWithoutItem_list_notesInput = {
    item_title: string
    item_skill: SkillCreateNestedOneWithoutSkill_itemsInput
  }

  export type ItemUncheckedCreateWithoutItem_list_notesInput = {
    item_id?: number
    item_title: string
    item_skill_id: number
  }

  export type ItemCreateOrConnectWithoutItem_list_notesInput = {
    where: ItemWhereUniqueInput
    create: XOR<ItemCreateWithoutItem_list_notesInput, ItemUncheckedCreateWithoutItem_list_notesInput>
  }

  export type EvaluationUpsertWithoutEval_list_notesInput = {
    update: XOR<EvaluationUpdateWithoutEval_list_notesInput, EvaluationUncheckedUpdateWithoutEval_list_notesInput>
    create: XOR<EvaluationCreateWithoutEval_list_notesInput, EvaluationUncheckedCreateWithoutEval_list_notesInput>
  }

  export type EvaluationUpdateWithoutEval_list_notesInput = {
    eval_date?: DateTimeFieldUpdateOperationsInput | Date | string
    eval_user?: UserUpdateOneRequiredWithoutUser_list_evalsInput
  }

  export type EvaluationUncheckedUpdateWithoutEval_list_notesInput = {
    eval_id?: IntFieldUpdateOperationsInput | number
    eval_date?: DateTimeFieldUpdateOperationsInput | Date | string
    eval_user_id?: IntFieldUpdateOperationsInput | number
  }

  export type ItemUpsertWithoutItem_list_notesInput = {
    update: XOR<ItemUpdateWithoutItem_list_notesInput, ItemUncheckedUpdateWithoutItem_list_notesInput>
    create: XOR<ItemCreateWithoutItem_list_notesInput, ItemUncheckedCreateWithoutItem_list_notesInput>
  }

  export type ItemUpdateWithoutItem_list_notesInput = {
    item_title?: StringFieldUpdateOperationsInput | string
    item_skill?: SkillUpdateOneRequiredWithoutSkill_itemsInput
  }

  export type ItemUncheckedUpdateWithoutItem_list_notesInput = {
    item_id?: IntFieldUpdateOperationsInput | number
    item_title?: StringFieldUpdateOperationsInput | string
    item_skill_id?: IntFieldUpdateOperationsInput | number
  }

  export type SkillCreateWithoutSkill_itemsInput = {
    skill_title: string
  }

  export type SkillUncheckedCreateWithoutSkill_itemsInput = {
    skill_id?: number
    skill_title: string
  }

  export type SkillCreateOrConnectWithoutSkill_itemsInput = {
    where: SkillWhereUniqueInput
    create: XOR<SkillCreateWithoutSkill_itemsInput, SkillUncheckedCreateWithoutSkill_itemsInput>
  }

  export type NoterCreateWithoutNoter_itemInput = {
    noter_value: number
    noter_eval: EvaluationCreateNestedOneWithoutEval_list_notesInput
  }

  export type NoterUncheckedCreateWithoutNoter_itemInput = {
    noter_eval_id: number
    noter_value: number
  }

  export type NoterCreateOrConnectWithoutNoter_itemInput = {
    where: NoterWhereUniqueInput
    create: XOR<NoterCreateWithoutNoter_itemInput, NoterUncheckedCreateWithoutNoter_itemInput>
  }

  export type NoterCreateManyNoter_itemInputEnvelope = {
    data: Enumerable<NoterCreateManyNoter_itemInput>
    skipDuplicates?: boolean
  }

  export type SkillUpsertWithoutSkill_itemsInput = {
    update: XOR<SkillUpdateWithoutSkill_itemsInput, SkillUncheckedUpdateWithoutSkill_itemsInput>
    create: XOR<SkillCreateWithoutSkill_itemsInput, SkillUncheckedCreateWithoutSkill_itemsInput>
  }

  export type SkillUpdateWithoutSkill_itemsInput = {
    skill_title?: StringFieldUpdateOperationsInput | string
  }

  export type SkillUncheckedUpdateWithoutSkill_itemsInput = {
    skill_id?: IntFieldUpdateOperationsInput | number
    skill_title?: StringFieldUpdateOperationsInput | string
  }

  export type NoterUpsertWithWhereUniqueWithoutNoter_itemInput = {
    where: NoterWhereUniqueInput
    update: XOR<NoterUpdateWithoutNoter_itemInput, NoterUncheckedUpdateWithoutNoter_itemInput>
    create: XOR<NoterCreateWithoutNoter_itemInput, NoterUncheckedCreateWithoutNoter_itemInput>
  }

  export type NoterUpdateWithWhereUniqueWithoutNoter_itemInput = {
    where: NoterWhereUniqueInput
    data: XOR<NoterUpdateWithoutNoter_itemInput, NoterUncheckedUpdateWithoutNoter_itemInput>
  }

  export type NoterUpdateManyWithWhereWithoutNoter_itemInput = {
    where: NoterScalarWhereInput
    data: XOR<NoterUpdateManyMutationInput, NoterUncheckedUpdateManyWithoutItem_list_notesInput>
  }

  export type ItemCreateWithoutItem_skillInput = {
    item_title: string
    item_list_notes?: NoterCreateNestedManyWithoutNoter_itemInput
  }

  export type ItemUncheckedCreateWithoutItem_skillInput = {
    item_id?: number
    item_title: string
    item_list_notes?: NoterUncheckedCreateNestedManyWithoutNoter_itemInput
  }

  export type ItemCreateOrConnectWithoutItem_skillInput = {
    where: ItemWhereUniqueInput
    create: XOR<ItemCreateWithoutItem_skillInput, ItemUncheckedCreateWithoutItem_skillInput>
  }

  export type ItemCreateManyItem_skillInputEnvelope = {
    data: Enumerable<ItemCreateManyItem_skillInput>
    skipDuplicates?: boolean
  }

  export type ItemUpsertWithWhereUniqueWithoutItem_skillInput = {
    where: ItemWhereUniqueInput
    update: XOR<ItemUpdateWithoutItem_skillInput, ItemUncheckedUpdateWithoutItem_skillInput>
    create: XOR<ItemCreateWithoutItem_skillInput, ItemUncheckedCreateWithoutItem_skillInput>
  }

  export type ItemUpdateWithWhereUniqueWithoutItem_skillInput = {
    where: ItemWhereUniqueInput
    data: XOR<ItemUpdateWithoutItem_skillInput, ItemUncheckedUpdateWithoutItem_skillInput>
  }

  export type ItemUpdateManyWithWhereWithoutItem_skillInput = {
    where: ItemScalarWhereInput
    data: XOR<ItemUpdateManyMutationInput, ItemUncheckedUpdateManyWithoutSkill_itemsInput>
  }

  export type ItemScalarWhereInput = {
    AND?: Enumerable<ItemScalarWhereInput>
    OR?: Enumerable<ItemScalarWhereInput>
    NOT?: Enumerable<ItemScalarWhereInput>
    item_id?: IntFilter | number
    item_title?: StringFilter | string
    item_skill_id?: IntFilter | number
  }

  export type EvaluationCreateManyEval_userInput = {
    eval_id?: number
    eval_date?: Date | string
  }

  export type EvaluationUpdateWithoutEval_userInput = {
    eval_date?: DateTimeFieldUpdateOperationsInput | Date | string
    eval_list_notes?: NoterUpdateManyWithoutNoter_evalInput
  }

  export type EvaluationUncheckedUpdateWithoutEval_userInput = {
    eval_id?: IntFieldUpdateOperationsInput | number
    eval_date?: DateTimeFieldUpdateOperationsInput | Date | string
    eval_list_notes?: NoterUncheckedUpdateManyWithoutNoter_evalInput
  }

  export type EvaluationUncheckedUpdateManyWithoutUser_list_evalsInput = {
    eval_id?: IntFieldUpdateOperationsInput | number
    eval_date?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NoterCreateManyNoter_evalInput = {
    noter_item_id: number
    noter_value: number
  }

  export type NoterUpdateWithoutNoter_evalInput = {
    noter_value?: IntFieldUpdateOperationsInput | number
    noter_item?: ItemUpdateOneRequiredWithoutItem_list_notesInput
  }

  export type NoterUncheckedUpdateWithoutNoter_evalInput = {
    noter_item_id?: IntFieldUpdateOperationsInput | number
    noter_value?: IntFieldUpdateOperationsInput | number
  }

  export type NoterUncheckedUpdateManyWithoutEval_list_notesInput = {
    noter_item_id?: IntFieldUpdateOperationsInput | number
    noter_value?: IntFieldUpdateOperationsInput | number
  }

  export type NoterCreateManyNoter_itemInput = {
    noter_eval_id: number
    noter_value: number
  }

  export type NoterUpdateWithoutNoter_itemInput = {
    noter_value?: IntFieldUpdateOperationsInput | number
    noter_eval?: EvaluationUpdateOneRequiredWithoutEval_list_notesInput
  }

  export type NoterUncheckedUpdateWithoutNoter_itemInput = {
    noter_eval_id?: IntFieldUpdateOperationsInput | number
    noter_value?: IntFieldUpdateOperationsInput | number
  }

  export type NoterUncheckedUpdateManyWithoutItem_list_notesInput = {
    noter_eval_id?: IntFieldUpdateOperationsInput | number
    noter_value?: IntFieldUpdateOperationsInput | number
  }

  export type ItemCreateManyItem_skillInput = {
    item_id?: number
    item_title: string
  }

  export type ItemUpdateWithoutItem_skillInput = {
    item_title?: StringFieldUpdateOperationsInput | string
    item_list_notes?: NoterUpdateManyWithoutNoter_itemInput
  }

  export type ItemUncheckedUpdateWithoutItem_skillInput = {
    item_id?: IntFieldUpdateOperationsInput | number
    item_title?: StringFieldUpdateOperationsInput | string
    item_list_notes?: NoterUncheckedUpdateManyWithoutNoter_itemInput
  }

  export type ItemUncheckedUpdateManyWithoutSkill_itemsInput = {
    item_id?: IntFieldUpdateOperationsInput | number
    item_title?: StringFieldUpdateOperationsInput | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.DMMF.Document;
}